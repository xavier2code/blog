<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>xavier2code</title>
    <link rel="self" type="application/atom+xml" href="https://xavier2code.site/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://xavier2code.site"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-04-09T00:00:00+00:00</updated>
    <id>https://xavier2code.site/atom.xml</id>
    <entry xml:lang="en">
        <title>50 Popular Backend Developer Interview Questions and Answers</title>
        <published>2025-04-09T00:00:00+00:00</published>
        <updated>2025-04-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/backend1/"/>
        <id>https://xavier2code.site/posts/backend1/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/backend1/">&lt;h2 id=&quot;beginner-level&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#beginner-level&quot; aria-label=&quot;Anchor link for: beginner-level&quot;&gt;Beginner Level&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;explain-what-an-api-endpoint-is&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#explain-what-an-api-endpoint-is&quot; aria-label=&quot;Anchor link for: explain-what-an-api-endpoint-is&quot;&gt;Explain what an API endpoint is?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;An API endpoint is a specific URL that acts as an entry point into a specific service or a functionality within a service.&lt;&#x2F;p&gt;
&lt;p&gt;Through an API endpoint, client applications can interact with the server sending requests (sometimes even with data in the form of payload) and receive a response from it.&lt;&#x2F;p&gt;
&lt;p&gt;Usually, each endpoint can be mapped to a single feature inside the server.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-you-explain-the-difference-between-sql-and-nosql-databases&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-you-explain-the-difference-between-sql-and-nosql-databases&quot; aria-label=&quot;Anchor link for: can-you-explain-the-difference-between-sql-and-nosql-databases&quot;&gt;Can you explain the difference between SQL and NoSQL databases?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;roadmap.sh&#x2F;sql&quot;&gt;SQL databases&lt;&#x2F;a&gt; (or relational databases as they’re also known) rely on a predefined schema (or structure) for their data. Whenever you describe a record, or table inside the database, you do so through its format (name and fields).&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;roadmap.sh&#x2F;mongodb&quot;&gt;NoSQL&lt;&#x2F;a&gt; databases, there is no schema, so there is no predefined structure to the data. You usually have collections of records that are not obligated to have the same structure, even if they represent conceptually the same thing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-a-restful-api-and-what-are-its-core-principles&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-a-restful-api-and-what-are-its-core-principles&quot; aria-label=&quot;Anchor link for: what-is-a-restful-api-and-what-are-its-core-principles&quot;&gt;What is a RESTful API, and what are its core principles?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;For an API to be RESTful (which means it complies with the REST guidelines), it needs to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It needs to follow a client-server architecture (which all HTTP-based services do).&lt;&#x2F;li&gt;
&lt;li&gt;It has to provide a uniform interface which means:
&lt;ul&gt;
&lt;li&gt;There should be a way to identify resources from each other through URIs (Unique Resource Identification).&lt;&#x2F;li&gt;
&lt;li&gt;There should be a way to modify resources through their representation.&lt;&#x2F;li&gt;
&lt;li&gt;Messages should be self descriptive, meaning that each message should provide enough information to understand how to process it.&lt;&#x2F;li&gt;
&lt;li&gt;Clients using the API should be able to discover actions available for the current resource using the provided response from the server (this is known as HATEOAS or Hypermedia as the Engine of Application State).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;It needs to be stateless, which means each request to the server must contain all information to process the request.&lt;&#x2F;li&gt;
&lt;li&gt;It should be a layered system, meaning that client and server don’t have to be connected directly to each other, there might be intermediaries, but that should not affect the communication between client and server.&lt;&#x2F;li&gt;
&lt;li&gt;Resources should be cacheable either by client or by server.&lt;&#x2F;li&gt;
&lt;li&gt;Optionally, the server could send code to the client for it to execute (known as “Code on Demand”).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;can-you-describe-a-typical-http-request-response-cycle&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-you-describe-a-typical-http-request-response-cycle&quot; aria-label=&quot;Anchor link for: can-you-describe-a-typical-http-request-response-cycle&quot;&gt;Can you describe a typical HTTP request&#x2F;response cycle?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The HTTP protocol is very structured and consists of a very well-defined set of steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Open the connection.&lt;&#x2F;strong&gt; The client opens a TCP connection to the server. The port will be port 80 for HTTP connections and 443 for HTTPS (secured) connections.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Send the request.&lt;&#x2F;strong&gt; The client will now send the HTTP request to the server. The request contains the following information:
&lt;ul&gt;
&lt;li&gt;An &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Methods&quot;&gt;HTTP method&lt;&#x2F;a&gt;. It can be any of them (i.e. GET, POST, PUT, DELETE, etc).&lt;&#x2F;li&gt;
&lt;li&gt;A URI (or Uniform Resource Identifier). This specifies the location of the resources on the server.&lt;&#x2F;li&gt;
&lt;li&gt;The HTTP version (usually HTTP&#x2F;1.1 or HTTP&#x2F;2).&lt;&#x2F;li&gt;
&lt;li&gt;A set of headers. They include extra data related to the request; there is a &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Headers&quot;&gt;full list of HTTP headers&lt;&#x2F;a&gt; that can be used here.&lt;&#x2F;li&gt;
&lt;li&gt;The optional body. Depending on the type of request, you’ll want to also send data, and the data is encoded inside the body of the request.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Request processed by the server.&lt;&#x2F;strong&gt; At this stage, the server will process the request and prepare a response.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Send the HTTP response back to the client.&lt;&#x2F;strong&gt; Through the open channel, the server sends back an HTTP response. The response will contain the following elements:
&lt;ul&gt;
&lt;li&gt;The HTTP Version.&lt;&#x2F;li&gt;
&lt;li&gt;The status code. There is a list of &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Status&quot;&gt;potential status codes&lt;&#x2F;a&gt; that describe the result of the request.&lt;&#x2F;li&gt;
&lt;li&gt;A set of headers with extra data.&lt;&#x2F;li&gt;
&lt;li&gt;The optional body, just like with the request, the body of the response is optional.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The connection is closed.&lt;&#x2F;strong&gt; This is usually the last step, although with newer versions of the protocol, there are options to leave the channel open and continue sending requests and responses back and forth.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;how-would-you-handle-file-uploads-in-a-web-application&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-would-you-handle-file-uploads-in-a-web-application&quot; aria-label=&quot;Anchor link for: how-would-you-handle-file-uploads-in-a-web-application&quot;&gt;How would you handle file uploads in a web application?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;From a backend developer perspective, the following considerations should be taken into account when handling file uploads regardless of the programming language you’re using:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Perform server-side validations.&lt;&#x2F;strong&gt; Validate that the size of your file is within range, and that the file is of the required type. You can check &lt;a href=&quot;https:&#x2F;&#x2F;cheatsheetseries.owasp.org&#x2F;cheatsheets&#x2F;File_Upload_Cheat_Sheet.html&quot;&gt;this OWASP guide&lt;&#x2F;a&gt; for more details.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Use secure channels.&lt;&#x2F;strong&gt; Make sure the file upload is done through an HTTPS connection.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Avoid name collision.&lt;&#x2F;strong&gt; Rename the file ensuring the new filename is unique within your system. Otherwise this can lead to application errors by not being able to save the uploaded files.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Keep metadata about your files.&lt;&#x2F;strong&gt; Store it in your database or somewhere else, but make sure to keep track of it, so you can provide extra information to your users. Also, if you’re renaming the files for security and to avoid name collisions, keep track of the original filename in case the file needs to be downloaded back by the user.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;what-kind-of-tests-would-you-write-for-a-new-api-endpoint&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-kind-of-tests-would-you-write-for-a-new-api-endpoint&quot; aria-label=&quot;Anchor link for: what-kind-of-tests-would-you-write-for-a-new-api-endpoint&quot;&gt;What kind of tests would you write for a new API endpoint?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;As backend developers, we have to think about the types of tests that there are out there.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unit tests:&lt;&#x2F;strong&gt; Always remember to only test the relevant logic through the public interface of your code (avoid testing private methods or inaccessible functions inside your modules). Focus on the business logic and don’t try to test the code that uses external services (like a database, the disk or anything outside of the piece of code you’re testing).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Integration tests:&lt;&#x2F;strong&gt; Test the full endpoint through its public interface (the actual HTTP endpoint) and see how it integrates with the external services it’s using (i.e the database, another API, etc).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Load testing &#x2F; performance testing:&lt;&#x2F;strong&gt; You might want to also check how the new endpoint behaves under heavy stress. This might not be required depending on the API you’re using, but as a rule of thumb, it’s a good one to perform at the end of the development phase before releasing the new endpoint into prod.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;describe-how-session-management-works-in-web-applications&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#describe-how-session-management-works-in-web-applications&quot; aria-label=&quot;Anchor link for: describe-how-session-management-works-in-web-applications&quot;&gt;Describe how session management works in web applications&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The following is a high-level overview of how session management works for web applications:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The session is created.&lt;&#x2F;strong&gt; This happens with the first interaction with the system by the user (during log-in). The backend of your app will create a unique session ID that will be stored and returned to the user to use in future requests.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Session information storage.&lt;&#x2F;strong&gt; The session data needs to be stored somewhere. Whether it’s in-memory, or inside a database, it needs to be indexed by the session ID from the previous point. Here the best option is to use a database (ideally something like Redis with high I&#x2F;O performance) so that the services can be scaled independently from the session data.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The session ID is sent to the client.&lt;&#x2F;strong&gt; The most common way of doing this is through cookies. The backend can set up a cookie with the session ID and the frontend can read it securely and use that ID however it needs to.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Client sends the session ID.&lt;&#x2F;strong&gt; After the ID is created, the client application will identify itself with the backend using this ID on every request.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Accessing the session data in the backend.&lt;&#x2F;strong&gt; The backend will access the stored session data using the session ID received from the client.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Session is closed.&lt;&#x2F;strong&gt; After a while, or perhaps through a user action, the session ID will be deleted, which will cause the session data to be lost (or removed from the DB). This effectively ends the interactions between the client and the server as part of the existing session.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>大话数据结构</title>
        <published>2025-04-02T00:00:00+00:00</published>
        <updated>2025-04-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/data-structure1/"/>
        <id>https://xavier2code.site/posts/data-structure1/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/data-structure1/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;xavier2code.site&#x2F;posts&#x2F;data-structure1&#x2F;%22https:&#x2F;&#x2F;typora-pic-xavier.oss-cn-wuhan-lr.aliyuncs.com&#x2F;typora&#x2F;icon_512x512.png%22&quot;&gt;typora&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-ju-jie-gou-xu-lun&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#shu-ju-jie-gou-xu-lun&quot; aria-label=&quot;Anchor link for: shu-ju-jie-gou-xu-lun&quot;&gt;数据结构绪论&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;数据项&lt;&#x2F;p&gt;
&lt;p&gt;数据元素&lt;&#x2F;p&gt;
&lt;p&gt;数据对象&lt;&#x2F;p&gt;
&lt;p&gt;数据结构&lt;&#x2F;p&gt;
&lt;p&gt;逻辑结构&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;没有特殊关系&lt;&#x2F;li&gt;
&lt;li&gt;一对一&lt;&#x2F;li&gt;
&lt;li&gt;一对多&lt;&#x2F;li&gt;
&lt;li&gt;多对多&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;物理结构&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;顺序&lt;&#x2F;li&gt;
&lt;li&gt;链式&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;数据类型&lt;&#x2F;p&gt;
&lt;p&gt;定义&lt;&#x2F;p&gt;
&lt;p&gt;抽象&lt;&#x2F;p&gt;
&lt;p&gt;算法的特性&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;输入&lt;&#x2F;li&gt;
&lt;li&gt;输出&lt;&#x2F;li&gt;
&lt;li&gt;有穷&lt;&#x2F;li&gt;
&lt;li&gt;可行&lt;&#x2F;li&gt;
&lt;li&gt;确定&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;算法效率的度量&lt;&#x2F;p&gt;
&lt;p&gt;事前与事后的统计&lt;&#x2F;p&gt;
&lt;p&gt;函数的渐进增长&lt;&#x2F;p&gt;
&lt;p&gt;时间复杂度&lt;&#x2F;p&gt;
&lt;p&gt;常见的时间复杂度，图表&lt;&#x2F;p&gt;
&lt;p&gt;空间复杂度&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xian-xing-biao&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#xian-xing-biao&quot; aria-label=&quot;Anchor link for: xian-xing-biao&quot;&gt;线性表&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;有限&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What is Cargo ?</title>
        <published>2025-03-12T00:00:00+00:00</published>
        <updated>2025-03-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/cargo/"/>
        <id>https://xavier2code.site/posts/cargo/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/cargo/">&lt;p&gt;As a seasoned architect in the Rust ecosystem, &lt;strong&gt;Cargo&lt;&#x2F;strong&gt; serves as your &lt;strong&gt;all-in-one construction headquarters&lt;&#x2F;strong&gt; – a masterful blend of project manager, logistics coordinator, and quality assurance team. Let me paint its multifaceted role through vivid metaphors:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-blueprint-designer-foundation-builder&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-blueprint-designer-foundation-builder&quot; aria-label=&quot;Anchor link for: 1-blueprint-designer-foundation-builder&quot;&gt;1. &lt;strong&gt;Blueprint Designer &amp;amp; Foundation Builder&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Like an architect&#x27;s drafting table, &lt;code&gt;cargo new&lt;&#x2F;code&gt; instantly generates standardized project blueprints. It creates the essential scaffolding:&lt;br &#x2F;&gt;
• &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; acts as the &lt;strong&gt;foundation stone tablet&lt;&#x2F;strong&gt; (manifest), etching metadata and dependencies in stone&lt;br &#x2F;&gt;
• &lt;code&gt;src&#x2F;&lt;&#x2F;code&gt; directory becomes your &lt;strong&gt;construction site&lt;&#x2F;strong&gt;, with &lt;code&gt;main.rs&lt;&#x2F;code&gt; as the central pillar&lt;br &#x2F;&gt;
This ritualized structure eliminates &quot;where to place the bricks&quot; debates, much like ancient temples followed sacred geometry.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-global-supply-chain-director&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-global-supply-chain-director&quot; aria-label=&quot;Anchor link for: 2-global-supply-chain-director&quot;&gt;2. &lt;strong&gt;Global Supply Chain Director&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Cargo operates a &lt;strong&gt;just-in-time dependency delivery system&lt;&#x2F;strong&gt;, rivaling modern logistics networks:&lt;br &#x2F;&gt;
• Your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; serves as the &lt;strong&gt;global procurement list&lt;&#x2F;strong&gt;, specifying crate versions like precision-engineered parts orders&lt;br &#x2F;&gt;
• Behind the scenes, it navigates crates.io (the &lt;strong&gt;Rust component megaport&lt;&#x2F;strong&gt;) and private warehouses, resolving version conflicts with semver GPS coordinates&lt;br &#x2F;&gt;
• Workspaces become &lt;strong&gt;industrial complexes&lt;&#x2F;strong&gt;, allowing interconnected projects to share resources like factories in an economic zone&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-assembly-line-foreman&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-assembly-line-foreman&quot; aria-label=&quot;Anchor link for: 3-assembly-line-foreman&quot;&gt;3. &lt;strong&gt;Assembly Line Foreman&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;cargo build&lt;&#x2F;code&gt; command initiates a &lt;strong&gt;smart manufacturing pipeline&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
• Rustc compilers work like robotic welders, guided by Cargo&#x27;s optimized build plans&lt;br &#x2F;&gt;
• Incremental compilation functions as &lt;strong&gt;3D-printed partial assemblies&lt;&#x2F;strong&gt;, reusing unchanged components&lt;br &#x2F;&gt;
• Debug&#x2F;Release profiles switch modes like retooling factories for prototypes vs mass production&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-quality-control-symphony-conductor&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-quality-control-symphony-conductor&quot; aria-label=&quot;Anchor link for: 4-quality-control-symphony-conductor&quot;&gt;4. &lt;strong&gt;Quality Control Symphony Conductor&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Cargo orchestrates verification processes with baton-like precision:&lt;br &#x2F;&gt;
• &lt;code&gt;cargo test&lt;&#x2F;code&gt; deploys unit test &quot;micro-inspectors&quot; and integration test &quot;stress-test rigs&quot;&lt;br &#x2F;&gt;
• &lt;code&gt;cargo check&lt;&#x2F;code&gt; acts as real-time blueprint validation, catching structural flaws before pouring concrete&lt;br &#x2F;&gt;
• Clippy serves as the ever-vigilant safety inspector, scanning for code smelts with laser precision&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-knowledge-archivist-distribution-manager&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-knowledge-archivist-distribution-manager&quot; aria-label=&quot;Anchor link for: 5-knowledge-archivist-distribution-manager&quot;&gt;5. &lt;strong&gt;Knowledge Archivist &amp;amp; Distribution Manager&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;• &lt;code&gt;cargo doc&lt;&#x2F;code&gt; constructs living documentation &lt;strong&gt;cathedrals&lt;&#x2F;strong&gt;, auto-generating API guides as stained-glass windows of knowledge&lt;br &#x2F;&gt;
• &lt;code&gt;cargo publish&lt;&#x2F;code&gt; becomes your package shipping dock, crating libraries for global distribution through crates.io waterways&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Metaphorical Synthesis&lt;&#x2F;strong&gt;: Cargo is to Rust developers what &lt;strong&gt;Roman aqueducts&lt;&#x2F;strong&gt; were to ancient cities – a monumental infrastructure that standardizes life-sustaining resource flows (dependencies), enables architectural marvels (complex projects), and outlives individual constructions through enduring conventions. It transforms coding from wilderness survival into civilization-building.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What is CSS Sprites ?</title>
        <published>2025-02-25T00:00:00+00:00</published>
        <updated>2025-02-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/css-sprites/"/>
        <id>https://xavier2code.site/posts/css-sprites/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/css-sprites/">&lt;h3 id=&quot;what-is-css-sprites&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-css-sprites&quot; aria-label=&quot;Anchor link for: what-is-css-sprites&quot;&gt;What is CSS Sprites?&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;CSS Sprites is a technique used in web development to combine multiple images into a single image file, known as a sprite. This technique helps reduce the number of HTTP requests made to the server, thereby improving the performance and load time of a website.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-css-sprites-work&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-css-sprites-work&quot; aria-label=&quot;Anchor link for: how-css-sprites-work&quot;&gt;How CSS Sprites Work&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Image Combination&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple small images (such as icons, buttons, backgrounds) are combined into a single large image file.&lt;&#x2F;li&gt;
&lt;li&gt;This large image is called a sprite.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CSS Background Positioning&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The sprite image is used as a background image for HTML elements.&lt;&#x2F;li&gt;
&lt;li&gt;By adjusting the &lt;code&gt;background-position&lt;&#x2F;code&gt; property, different parts of the sprite image can be displayed as needed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;benefits-of-css-sprites&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#benefits-of-css-sprites&quot; aria-label=&quot;Anchor link for: benefits-of-css-sprites&quot;&gt;Benefits of CSS Sprites&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reduced HTTP Requests&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of making multiple HTTP requests for individual images, only one request is made for the sprite image.&lt;&#x2F;li&gt;
&lt;li&gt;This significantly reduces the load time and improves the overall performance of the website.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved Caching&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Since only one image is loaded, it can be cached by the browser more efficiently.&lt;&#x2F;li&gt;
&lt;li&gt;This means that subsequent page loads will be faster as the browser can reuse the cached sprite image.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simplified Maintenance&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Managing a single sprite image can be easier than managing multiple individual images.&lt;&#x2F;li&gt;
&lt;li&gt;Updates to the sprite image can be made in one place, reducing the risk of inconsistencies.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;example-of-css-sprites&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-of-css-sprites&quot; aria-label=&quot;Anchor link for: example-of-css-sprites&quot;&gt;Example of CSS Sprites&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;step-1-create-the-sprite-image&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#step-1-create-the-sprite-image&quot; aria-label=&quot;Anchor link for: step-1-create-the-sprite-image&quot;&gt;Step 1: Create the Sprite Image&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Combine multiple small images into a single large image. For example, you might have a sprite image that includes icons for social media, navigation buttons, etc.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-2-use-css-to-display-specific-parts-of-the-sprite&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#step-2-use-css-to-display-specific-parts-of-the-sprite&quot; aria-label=&quot;Anchor link for: step-2-use-css-to-display-specific-parts-of-the-sprite&quot;&gt;Step 2: Use CSS to Display Specific Parts of the Sprite&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;en&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;viewport&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;CSS Sprites Example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.sprite &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;background-image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;sprite.png&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;* Path to the sprite image *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;background-repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ed9366;&quot;&gt;no-repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.facebook-icon &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;background-position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;* Position of the Facebook icon in the sprite *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.twitter-icon &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;background-position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;* Position of the Twitter icon in the sprite *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;.instagram-icon &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;background-position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;* Position of the Instagram icon in the sprite *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;sprite facebook-icon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;sprite twitter-icon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;sprite instagram-icon&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d490;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;explanation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#explanation&quot; aria-label=&quot;Anchor link for: explanation&quot;&gt;Explanation&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sprite Image&lt;&#x2F;strong&gt;: The sprite image (&lt;code&gt;sprite.png&lt;&#x2F;code&gt;) contains all the icons combined into one file.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;CSS Classes&lt;&#x2F;strong&gt;: Each icon has a specific class (e.g., &lt;code&gt;.facebook-icon&lt;&#x2F;code&gt;, &lt;code&gt;.twitter-icon&lt;&#x2F;code&gt;, &lt;code&gt;.instagram-icon&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Background Position&lt;&#x2F;strong&gt;: The &lt;code&gt;background-position&lt;&#x2F;code&gt; property is used to display the correct part of the sprite image for each icon.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;considerations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#considerations&quot; aria-label=&quot;Anchor link for: considerations&quot;&gt;Considerations&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Image Size&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure the sprite image is not excessively large, as this can negate the performance benefits.&lt;&#x2F;li&gt;
&lt;li&gt;Optimize the sprite image for web use (e.g., use appropriate compression).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Maintainability&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Keep the sprite image and CSS well-organized to make updates easier.&lt;&#x2F;li&gt;
&lt;li&gt;Consider using tools or scripts to automate the sprite creation process.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Browser Compatibility&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CSS sprites are widely supported across modern browsers, but always test to ensure compatibility.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;CSS Sprites is a powerful technique for optimizing web performance by reducing the number of HTTP requests. By combining multiple images into a single sprite and using CSS to display specific parts of the sprite, you can significantly improve the load time and overall performance of your website.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding Distributed Transactions</title>
        <published>2025-02-24T00:00:00+00:00</published>
        <updated>2025-02-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/dtp/"/>
        <id>https://xavier2code.site/posts/dtp/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/dtp/">&lt;h2 id=&quot;what-is-a-distributed-transaction&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-a-distributed-transaction&quot; aria-label=&quot;Anchor link for: what-is-a-distributed-transaction&quot;&gt;What is a Distributed Transaction?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A distributed transaction is a transaction that spans multiple resources, such as multiple databases or multiple nodes within a single database. These transactions are essential in environments where data is spread across different systems, and consistency and integrity must be maintained across all involved resources.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;technical-principles-of-distributed-transactions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#technical-principles-of-distributed-transactions&quot; aria-label=&quot;Anchor link for: technical-principles-of-distributed-transactions&quot;&gt;Technical Principles of Distributed Transactions&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Coordination and Management:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Distributed transactions require coordination across multiple resources. A transaction manager is responsible for managing these resources, which can be either one of the data repositories involved in the transaction or an independent resource dedicated solely to coordination.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Two-Phase Commit (2PC):&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;This is a common protocol used to ensure atomicity in distributed transactions. It involves two phases:
&lt;ul&gt;
&lt;li&gt;Prepare Phase: The transaction manager asks all resources if they are ready to commit. If any resource responds negatively, the transaction is rolled back.&lt;&#x2F;li&gt;
&lt;li&gt;Commit Phase: If all resources agree, the transaction manager sends a commit request to all resources. If a resource fails during this phase, the transaction is rolled back.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Challenges:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Network Partitioning: Distributed systems can experience network failures, leading to disconnections that affect transaction coordination.&lt;&#x2F;li&gt;
&lt;li&gt;Latency: Communication delays between geographically distributed services can slow down transaction rates.&lt;&#x2F;li&gt;
&lt;li&gt;Fault Tolerance: Ensuring data consistency when a node or service fails is challenging. Techniques like retries, compensating transactions, and distributed consensus algorithms are necessary.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;CAP Theorem:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;The CAP theorem states that a distributed system can only guarantee two out of three properties: Consistency, Availability, and Partition Tolerance. In practice, distributed systems often prioritize availability and partition tolerance over strict consistency.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;use-cases-and-application-scenarios&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#use-cases-and-application-scenarios&quot; aria-label=&quot;Anchor link for: use-cases-and-application-scenarios&quot;&gt;Use Cases and Application Scenarios&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;E-commerce Systems:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Distributed transactions are crucial for maintaining consistency across multiple services, such as inventory management, payment processing, and order fulfillment. Systems like Netflix’s Cassandra and Amazon’s DynamoDB use eventual consistency models to ensure high availability and fault tolerance.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Financial Systems:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Financial transactions often require strong consistency and fault tolerance. Two-phase commit (2PC) and Saga Pattern are used to manage distributed transactions in such environments.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Healthcare Systems:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Distributed transactions are used to coordinate multiple services, ensuring data consistency across different healthcare information systems. The Saga Pattern is often employed for its ability to handle failures and maintain eventual consistency.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Event-Driven Architectures:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;In event-driven systems, services communicate asynchronously using message brokers like Kafka or RabbitMQ. This approach enhances fault tolerance and availability but requires robust mechanisms to ensure eventual consistency.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Distributed transactions are essential for maintaining data integrity and consistency across multiple resources in distributed systems. While traditional ACID properties are challenging to fully enforce in distributed environments, modern approaches like the Saga Pattern and eventual consistency models offer scalable and fault-tolerant alternatives. The choice of transaction management pattern depends on the specific requirements of the application, including the need for consistency, availability, and fault tolerance.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A Shell Script for Backing Up MinIO Buckets</title>
        <published>2025-02-21T00:00:00+00:00</published>
        <updated>2025-02-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/minio-shell/"/>
        <id>https://xavier2code.site/posts/minio-shell/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/minio-shell/">&lt;blockquote&gt;
&lt;p&gt;Usage: .&#x2F;your_shell.sh [your minio name] &lt;backup location&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# MIT License
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Copyright (c) 2025 xavier2code
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Permission is hereby granted, free of charge, to any person obtaining a copy
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# of this software and associated documentation files (the &amp;quot;Software&amp;quot;), to deal
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# in the Software without restriction, including without limitation the rights
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# to use, copy, modify, merge, publish, distribute, sublicense, and&#x2F;or sell
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# copies of the Software, and to permit persons to whom the Software is
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# furnished to do so, subject to the following conditions:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# The above copyright notice and this permission notice shall be included in all
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# copies or substantial portions of the Software.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# THE SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# SOFTWARE.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Ensure the &amp;#39;mc&amp;#39; command is available
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-v&lt;&#x2F;span&gt;&lt;span&gt; mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;MinIO Client (mc) is not installed. Installing mc...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Detect system architecture
&lt;&#x2F;span&gt;&lt;span&gt;    ARCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;ARCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;x86_64&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;dl.min.io&#x2F;client&#x2F;mc&#x2F;release&#x2F;linux-amd64&#x2F;mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;        -o&lt;&#x2F;span&gt;&lt;span&gt; mc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;ARCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;aarch64&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;dl.min.io&#x2F;client&#x2F;mc&#x2F;release&#x2F;linux-arm64&#x2F;mc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;        -o&lt;&#x2F;span&gt;&lt;span&gt; mc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Unsupported architecture: $&lt;&#x2F;span&gt;&lt;span&gt;ARCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; +x mc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; mv mc &#x2F;usr&#x2F;local&#x2F;bin&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;MinIO Client (mc) installed successfully.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Check the number of arguments provided
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-eq&lt;&#x2F;span&gt;&lt;span&gt; 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Usage: $&lt;&#x2F;span&gt;&lt;span&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; [source_bucket] destination_bucket&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-eq&lt;&#x2F;span&gt;&lt;span&gt; 1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Set default source bucket if only one argument is provided
&lt;&#x2F;span&gt;&lt;span&gt;    SOURCE_BUCKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;single_minio&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    DESTINATION_BUCKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Assign the provided arguments to variables
&lt;&#x2F;span&gt;&lt;span&gt;    SOURCE_BUCKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    DESTINATION_BUCKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# Copy the bucket from source to destination and check the exit status directly
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Starting to copy bucket: $&lt;&#x2F;span&gt;&lt;span&gt;SOURCE_BUCKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; -&amp;gt; $&lt;&#x2F;span&gt;&lt;span&gt;DESTINATION_BUCKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;mc&lt;&#x2F;span&gt;&lt;span&gt; cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; --recursive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;SOURCE_BUCKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot; &amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;DESTINATION_BUCKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Bucket copy completed successfully: $&lt;&#x2F;span&gt;&lt;span&gt;SOURCE_BUCKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; -&amp;gt; $&lt;&#x2F;span&gt;&lt;span&gt;DESTINATION_BUCKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Bucket copy failed&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;echo
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>JSON Crack</title>
        <published>2025-02-19T00:00:00+00:00</published>
        <updated>2025-02-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/json-crack/"/>
        <id>https://xavier2code.site/posts/json-crack/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/json-crack/">&lt;h2 id=&quot;json-crack-an-innovative-open-source-data-visualization-tool&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#json-crack-an-innovative-open-source-data-visualization-tool&quot; aria-label=&quot;Anchor link for: json-crack-an-innovative-open-source-data-visualization-tool&quot;&gt;JSON Crack: An Innovative Open-Source Data Visualization Tool&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;JSON Crack&lt;&#x2F;strong&gt; is a powerful, open-source tool designed to visualize JSON data and other common data formats (such as YAML, XML, CSV, and TOML) into interactive graphs and trees. This tool aims to simplify the process of exploring, formatting, and validating JSON data, making it easier for developers and data analysts to work with complex data structures.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-features&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-features&quot; aria-label=&quot;Anchor link for: key-features&quot;&gt;Key Features&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Multi-Format Support&lt;&#x2F;strong&gt;: JSON Crack supports a wide range of data formats, including JSON, YAML, XML, CSV, and TOML.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Interactive Graphs&lt;&#x2F;strong&gt;: Convert data into interactive graphs or trees, allowing users to explore complex data structures visually.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Dark Mode: Offers&lt;&#x2F;strong&gt; a dark mode option to reduce eye strain during extended use.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Data Conversion&lt;&#x2F;strong&gt;: Seamlessly transform data between different formats (e.g., JSON to CSV, XML to JSON) for easy sharing and interoperability.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Code Generation&lt;&#x2F;strong&gt;: Generate TypeScript interfaces, Golang structs, and JSON Schema from your data.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Advanced Tools&lt;&#x2F;strong&gt;: Includes features like JWT decoding, data randomization, and execution of jq or JSON path queries.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Export Options&lt;&#x2F;strong&gt;: Export visualizations as images in formats like PNG, JPEG, or SVG for sharing and reporting.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Privacy&lt;&#x2F;strong&gt;: All data processing is done locally, ensuring that no data is stored on external servers.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#getting-started&quot; aria-label=&quot;Anchor link for: getting-started&quot;&gt;Getting Started&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To get started with JSON Crack, you can follow these steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the Repository:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;AykutSarac&#x2F;jsoncrack.com.git
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Install Dependencies:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;pnpm&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Run the Project:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;pnpm&lt;&#x2F;span&gt;&lt;span&gt; dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will start the development server, and you can access JSON Crack at &lt;a href=&quot;http:&#x2F;&#x2F;localhost:3000&#x2F;&quot;&gt;http:&#x2F;&#x2F;localhost:3000&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;docker-setup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#docker-setup&quot; aria-label=&quot;Anchor link for: docker-setup&quot;&gt;Docker Setup&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you prefer to run JSON Crack using Docker, you can follow these steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Build the Docker Image:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; compose build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Run the Docker Container:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; compose up
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can then access JSON Crack at &lt;code&gt;http:&#x2F;&#x2F;localhost:8888&#x2F;.&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;community-and-contributions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#community-and-contributions&quot; aria-label=&quot;Anchor link for: community-and-contributions&quot;&gt;Community and Contributions&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;JSON Crack has gained significant recognition in the open-source community, with over 29.8k stars on GitHub as of October 2024. The project is actively maintained, and contributions from the community are encouraged. You can contribute by suggesting new features, fixing bugs, or improving the documentation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;future-developments&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#future-developments&quot; aria-label=&quot;Anchor link for: future-developments&quot;&gt;Future Developments&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The development team behind JSON Crack is continuously working on enhancing the tool. Future plans include support for additional data formats, enhanced AI-driven features, improved performance for handling larger datasets, and better integration with other development tools.&lt;&#x2F;p&gt;
&lt;p&gt;JSON Crack is a valuable tool for anyone working with JSON and other structured data formats, providing a user-friendly interface and powerful features to simplify data visualization and analysis. Whether you are a developer, data analyst, or simply someone interested in data visualization, JSON Crack is worth exploring.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>RAID</title>
        <published>2025-02-19T00:00:00+00:00</published>
        <updated>2025-02-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/raid/"/>
        <id>https://xavier2code.site/posts/raid/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/raid/">&lt;p&gt;&lt;strong&gt;RAID&lt;&#x2F;strong&gt; (Redundant Array of Independent Disks) is a technology that combines multiple physical disks into a single logical unit to improve performance, reliability, or both. Here&#x27;s a detailed introduction to RAID and its principles:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;raid-levels-and-their-principles&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#raid-levels-and-their-principles&quot; aria-label=&quot;Anchor link for: raid-levels-and-their-principles&quot;&gt;RAID Levels and Their Principles&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;raid-0&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#raid-0&quot; aria-label=&quot;Anchor link for: raid-0&quot;&gt;RAID 0&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Principle: RAID 0 uses data striping to divide data into chunks and distribute them across multiple disks. When data is written or read, it is done in parallel across the disks, which significantly improves performance.&lt;&#x2F;li&gt;
&lt;li&gt;Advantages: High read and write performance, 100% disk utilization.&lt;&#x2F;li&gt;
&lt;li&gt;Disadvantages: No redundancy; if one disk fails, all data is lost.&lt;&#x2F;li&gt;
&lt;li&gt;Use Cases: Suitable for applications where performance is critical and data loss is not a concern, such as video editing or temporary data storage.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;raid-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#raid-1&quot; aria-label=&quot;Anchor link for: raid-1&quot;&gt;RAID 1&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Principle: RAID 1 uses mirroring to duplicate data across two or more disks. When data is written to one disk, it is simultaneously written to the other disk(s), providing redundancy.&lt;&#x2F;li&gt;
&lt;li&gt;Advantages: High data reliability, read performance is improved because data can be read from either disk.&lt;&#x2F;li&gt;
&lt;li&gt;Disadvantages: 50% disk utilization, write performance is slightly lower due to the need to write data to multiple disks.&lt;&#x2F;li&gt;
&lt;li&gt;Use Cases: Ideal for critical data storage, such as financial records or databases where data integrity is paramount.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;raid-5&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#raid-5&quot; aria-label=&quot;Anchor link for: raid-5&quot;&gt;RAID 5&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Principle: RAID 5 combines data striping with distributed parity. Data and parity information are striped across multiple disks. If a disk fails, the parity information can be used to reconstruct the lost data.&lt;&#x2F;li&gt;
&lt;li&gt;Advantages: Provides a good balance of performance and redundancy, uses less disk space for redundancy compared to RAID 1.&lt;&#x2F;li&gt;
&lt;li&gt;Disadvantages: More complex to implement, write performance can be impacted due to parity calculations.&lt;&#x2F;li&gt;
&lt;li&gt;Use Cases: Commonly used in file servers and databases where both performance and data protection are important.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;raid-6&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#raid-6&quot; aria-label=&quot;Anchor link for: raid-6&quot;&gt;RAID 6&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Principle: Similar to RAID 5 but uses double parity, allowing for two disk failures without data loss. Data and two sets of parity information are distributed across the disks.&lt;&#x2F;li&gt;
&lt;li&gt;Advantages: Higher fault tolerance than RAID 5.&lt;&#x2F;li&gt;
&lt;li&gt;Disadvantages: Even more complex, additional overhead for parity calculations.&lt;&#x2F;li&gt;
&lt;li&gt;Use Cases: Suitable for environments where high reliability is crucial, such as large-scale data storage systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;raid-10-1-0&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#raid-10-1-0&quot; aria-label=&quot;Anchor link for: raid-10-1-0&quot;&gt;RAID 10 (1+0)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Principle: Combines mirroring (RAID 1) and striping (RAID 0). Data is mirrored first, then striped across multiple mirrored pairs.&lt;&#x2F;li&gt;
&lt;li&gt;Advantages: High performance and good redundancy, combines the benefits of RAID 0 and RAID 1.&lt;&#x2F;li&gt;
&lt;li&gt;Disadvantages: High cost due to the need for more disks, 50% disk utilization.&lt;&#x2F;li&gt;
&lt;li&gt;Use Cases: Ideal for high-performance, high-reliability applications like database servers and virtualization environments.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;raid-50-5-0&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#raid-50-5-0&quot; aria-label=&quot;Anchor link for: raid-50-5-0&quot;&gt;RAID 50 (5+0)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Principle: Combines RAID 5 and RAID 0. Data is striped across multiple RAID 5 arrays, providing both high performance and redundancy.&lt;&#x2F;li&gt;
&lt;li&gt;Advantages: High performance and better fault tolerance than RAID 5.&lt;&#x2F;li&gt;
&lt;li&gt;Disadvantages: Complex to manage, requires more disks.&lt;&#x2F;li&gt;
&lt;li&gt;Use Cases: Suitable for large-scale storage systems where both performance and reliability are critical.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;basic-raid-technologies&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#basic-raid-technologies&quot; aria-label=&quot;Anchor link for: basic-raid-technologies&quot;&gt;Basic RAID Technologies&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Mirroring: Copies data to multiple disks to provide redundancy and improve read performance.
Striping: Splits data into smaller chunks and distributes them across multiple disks to enhance performance.
Parity: Uses redundant data to detect and correct errors, improving reliability and fault tolerance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;RAID technology enhances storage performance and reliability by combining multiple disks into a single logical unit. Different RAID levels offer varying degrees of performance and redundancy, allowing users to choose the best configuration based on their specific needs. RAID 0 focuses on performance, RAID 1 on reliability, RAID 5 and RAID 6 balance both, while RAID 10 and RAID 50 provide high performance with redundancy.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Books on Distributed Systems</title>
        <published>2025-02-19T00:00:00+00:00</published>
        <updated>2025-02-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/system/"/>
        <id>https://xavier2code.site/posts/system/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/system/">&lt;ol&gt;
&lt;li&gt;Distributed Systems: Principles and Paradigms&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Authors: Andrew S. Tanenbaum and Maarten Van Steen&lt;&#x2F;li&gt;
&lt;li&gt;Description: This book provides a comprehensive introduction to distributed systems, covering communication, synchronization, consistency, and fault tolerance. It is great for those looking to get started in the field of distributed computing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Distributed Algorithms&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Author: Nancy A. Lynch&lt;&#x2F;li&gt;
&lt;li&gt;Description: This book is a fundamental resource for understanding advanced topics in distributed systems, such as consensus theory, agreement problems, and the SNAP algorithm. It is essential for those interested in the theoretical aspects of distributed systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Scalability Rules: 50 Principles for Scaling Web Sites&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Authors: Martin L. Abbott and Michael T. Fisher&lt;&#x2F;li&gt;
&lt;li&gt;Description: This book condenses years of experience into 50 reusable principles for deploying high-availability web applications and massive-scale distributed systems. It provides valuable insights for achieving scalability and reliability.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Streaming Systems: The What, Where, When, and How of Large-Scale Data Processing&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Authors: Tyler Akidau, Slava Chernyak, and Reuven Lax&lt;&#x2F;li&gt;
&lt;li&gt;Description: This book focuses on stream processing in distributed systems, providing practical methods and user stories that demonstrate how to effectively build and deploy streaming data systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Building Microservices&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Author: Sam Newman&lt;&#x2F;li&gt;
&lt;li&gt;Description: This book covers the steps involved in implementing, installing, and maintaining microservices. It addresses issues such as service decomposition, communication interfaces, and deployment strategies, making it a valuable resource for teams working with microservices.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Site Reliability Engineering: How Google Runs Production Systems&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Authors: Niall Richard Murphy, Betsy Beyer, Chris Jones, and Jennifer Petoff&lt;&#x2F;li&gt;
&lt;li&gt;Description: This book shares Google&#x27;s extensive experience in building and operating distributed systems. It covers SRE principles, incident response, capacity management, and automation, providing guidelines for maintaining the reliability and scalability of distributed systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;Release It!: Design and Deploy Production-Ready Software&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Author: Michael T. Nygard&lt;&#x2F;li&gt;
&lt;li&gt;Description: This book introduces readers to the challenges of running distributed systems in a production environment. It covers stability patterns, capacity planning, and fault recovery strategies, making it a must-read for engineers responsible for production systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;Distributed Systems for Practitioners&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Author: C. Thomas Wu&lt;&#x2F;li&gt;
&lt;li&gt;Description: This book bridges the gap between theory and practice, providing concrete tips on planning, deploying, and maintaining distributed systems. It is a practical guide for building resilient and scalable distributed systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;Thinking in Systems: A Primer&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Author: Donella Meadows&lt;&#x2F;li&gt;
&lt;li&gt;Description: This book provides a foundation in systems thinking, focusing on the interactions between components rather than the components themselves. It uses everyday metaphors to explain core systems thinking ideas, making it useful for understanding broader system concepts.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;Drift into Failure: From Hunting Broken Components to Understanding Complex Systems&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Author: Sidney Dekker&lt;&#x2F;li&gt;
&lt;li&gt;Description: This book explores the cultural and environmental causes of system failure, providing valuable insights for understanding the broader context of system reliability and security. It is particularly useful for software engineering managers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These books cover a wide range of topics related to distributed systems and data-intensive applications, providing both theoretical knowledge and practical advice. They are highly recommended for anyone looking to deepen their understanding of these areas.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>ld-prime in Rust</title>
        <published>2025-02-14T00:00:00+00:00</published>
        <updated>2025-02-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/ld-prime/"/>
        <id>https://xavier2code.site/posts/ld-prime/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/ld-prime/">&lt;p&gt;The error &quot;linker ld-prime not found&quot; suggests that the linker ld-prime is not available or not correctly specified in your Rust project configuration. Here are some steps to resolve this issue:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Verify Xcode Installation&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Ensure that you have Xcode 15 or later installed, as ld-prime is included with Xcode 15. You can check the installed version of Xcode by running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;xcodebuild&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; -version
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Specify the Correct Linker Path&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The ld-prime linker might not be directly accessible by name. You need to specify the full path to the linker. You can find the path to ld-prime by running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;xcrun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; --find&lt;&#x2F;span&gt;&lt;span&gt; ld
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command will output the path to the linker, which might be something like &lt;code&gt;&#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Toolchains&#x2F;XcodeDefault.xctoolchain&#x2F;usr&#x2F;bin&#x2F;ld&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Update Cargo Configuration&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Update your Cargo configuration to use the full path to ld-prime. You can do this by editing the .cargo&#x2F;config.toml file in your project directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;x86_64-apple-darwin&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;linker &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Toolchains&#x2F;XcodeDefault.xctoolchain&#x2F;usr&#x2F;bin&#x2F;ld&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace the path with the one you obtained from the xcrun --find ld command.&lt;&#x2F;p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Verify the Configuration&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;After updating the configuration, try building your project again:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Fallback to ld64 if Necessary&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If you continue to encounter issues with ld-prime, you can revert to using the older ld64 linker as a temporary workaround. Update your .cargo&#x2F;config.toml to use ld64:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;x86_64-apple-darwin&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;linker &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;ld64&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;additional-tips&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#additional-tips&quot; aria-label=&quot;Anchor link for: additional-tips&quot;&gt;Additional Tips&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Clean Build: Sometimes, a clean build can resolve unexpected issues. Run the following command to clean the build directory:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; clean
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Check for Updates: Ensure that your Rust toolchain and Xcode are up to date. You can update Rust using rustup:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;rustup&lt;&#x2F;span&gt;&lt;span&gt; update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By following these steps, you should be able to resolve the &quot;linker ld-prime not found&quot; error and configure your Rust project to use the appropriate linker on macOS with Xcode 15.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Buffer, Window, Tab, and Session in Vim</title>
        <published>2025-02-14T00:00:00+00:00</published>
        <updated>2025-02-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/vim1/"/>
        <id>https://xavier2code.site/posts/vim1/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/vim1/">&lt;h3 id=&quot;1-buffer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-buffer&quot; aria-label=&quot;Anchor link for: 1-buffer&quot;&gt;&lt;strong&gt;1. Buffer&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purpose&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
A buffer is a memory space that holds the content of a file. When you open a file (e.g., &lt;code&gt;:e filename&lt;&#x2F;code&gt;), its content is loaded into a buffer.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Linked to files&lt;&#x2F;strong&gt;: A buffer corresponds to a file (or unsaved temporary content).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Independent of UI&lt;&#x2F;strong&gt;: Buffers exist even if not displayed in a window.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Efficient management&lt;&#x2F;strong&gt;: Allows editing multiple files in the background without displaying them.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Common Commands&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:ls&lt;&#x2F;code&gt; or &lt;code&gt;:buffers&lt;&#x2F;code&gt;: List all buffers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;:b N&lt;&#x2F;code&gt;: Jump to buffer number &lt;code&gt;N&lt;&#x2F;code&gt; (e.g., &lt;code&gt;:b 3&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;:bdelete&lt;&#x2F;code&gt; or &lt;code&gt;:bd&lt;&#x2F;code&gt;: Delete the current buffer.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;:bn&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;:bp&lt;&#x2F;code&gt;: Switch to the next&#x2F;previous buffer.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Key Points&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Closing a window does not close its buffer.&lt;&#x2F;li&gt;
&lt;li&gt;Buffers are cleared when Vim exits (unless saved via a session).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;2-window&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-window&quot; aria-label=&quot;Anchor link for: 2-window&quot;&gt;&lt;strong&gt;2. Window&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purpose&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
A window is a visual area that &lt;strong&gt;displays a buffer&#x27;s content&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Split screens&lt;&#x2F;strong&gt;: Create new windows with &lt;code&gt;:split&lt;&#x2F;code&gt; (horizontal) or &lt;code&gt;:vsplit&lt;&#x2F;code&gt; (vertical).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Flexible layout&lt;&#x2F;strong&gt;: Each window can show a different buffer or different parts of the same buffer.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Common Commands&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl-w hjkl&lt;&#x2F;code&gt;: Move focus between windows.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-w c&lt;&#x2F;code&gt;: Close the current window.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-w o&lt;&#x2F;code&gt;: Keep only the current window (close others).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Key Points&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A buffer can be displayed in multiple windows (e.g., comparing code sections).&lt;&#x2F;li&gt;
&lt;li&gt;Closing a window does not close its buffer (unless no other windows reference it and &lt;code&gt;hidden&lt;&#x2F;code&gt; is disabled).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-tab&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-tab&quot; aria-label=&quot;Anchor link for: 3-tab&quot;&gt;&lt;strong&gt;3. Tab&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purpose&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
A tab is a &lt;strong&gt;container for windows&lt;&#x2F;strong&gt;, organizing workspaces.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Task isolation&lt;&#x2F;strong&gt;: Each tab can host a unique window layout (e.g., one tab for coding, another for logs).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Independent layouts&lt;&#x2F;strong&gt;: Window arrangements in different tabs do not interfere.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Common Commands&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:tabnew&lt;&#x2F;code&gt;: Create a new tab.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;gt&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;gT&lt;&#x2F;code&gt;: Switch to the next&#x2F;previous tab.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;:tabclose&lt;&#x2F;code&gt;: Close the current tab.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Key Points&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tabs do not directly manage buffers; they organize windows.&lt;&#x2F;li&gt;
&lt;li&gt;Multiple tabs can display the same buffer (e.g., editing a file across tabs).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;4-session&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-session&quot; aria-label=&quot;Anchor link for: 4-session&quot;&gt;&lt;strong&gt;4. Session&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purpose&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
A session is a &lt;strong&gt;snapshot of your Vim workspace&lt;&#x2F;strong&gt;, saving tabs, window layouts, buffers, cursor positions, and settings.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Persistent environments&lt;&#x2F;strong&gt;: Ideal for restoring project contexts (e.g., development setups).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Quick recovery&lt;&#x2F;strong&gt;: Reload a session to resume work instantly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Common Commands&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:mksession ~&#x2F;mysession.vim&lt;&#x2F;code&gt;: Save a session to a file.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;vim -S ~&#x2F;mysession.vim&lt;&#x2F;code&gt;: Launch Vim with a saved session.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;:source ~&#x2F;mysession.vim&lt;&#x2F;code&gt;: Load a session in an open Vim instance.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Key Points&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sessions do not save file contents (managed by buffers).&lt;&#x2F;li&gt;
&lt;li&gt;Requires manual saving&#x2F;loading (can be automated with plugins).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;relationship-summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#relationship-summary&quot; aria-label=&quot;Anchor link for: relationship-summary&quot;&gt;&lt;strong&gt;Relationship Summary&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Concept&lt;&#x2F;th&gt;&lt;th&gt;Layer&lt;&#x2F;th&gt;&lt;th&gt;Role&lt;&#x2F;th&gt;&lt;th&gt;Analogy&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Buffer&lt;&#x2F;td&gt;&lt;td&gt;Data&lt;&#x2F;td&gt;&lt;td&gt;Stores file content&lt;&#x2F;td&gt;&lt;td&gt;Webpage in a browser&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Window&lt;&#x2F;td&gt;&lt;td&gt;View&lt;&#x2F;td&gt;&lt;td&gt;Displays buffer content&lt;&#x2F;td&gt;&lt;td&gt;Browser window&#x2F;tab&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Tab&lt;&#x2F;td&gt;&lt;td&gt;Container&lt;&#x2F;td&gt;&lt;td&gt;Organizes window groups&lt;&#x2F;td&gt;&lt;td&gt;Browser tab&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Session&lt;&#x2F;td&gt;&lt;td&gt;Persistence&lt;&#x2F;td&gt;&lt;td&gt;Saves entire workspace state&lt;&#x2F;td&gt;&lt;td&gt;Browser session restore&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;example-workflow&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-workflow&quot; aria-label=&quot;Anchor link for: example-workflow&quot;&gt;&lt;strong&gt;Example Workflow&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multi-file Editing&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Open &lt;code&gt;file1&lt;&#x2F;code&gt;, &lt;code&gt;file2&lt;&#x2F;code&gt;, &lt;code&gt;file3&lt;&#x2F;code&gt; → creates 3 buffers.&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;:split&lt;&#x2F;code&gt; to show &lt;code&gt;file1&lt;&#x2F;code&gt; and &lt;code&gt;file2&lt;&#x2F;code&gt; in separate windows.&lt;&#x2F;li&gt;
&lt;li&gt;Create a new tab (&lt;code&gt;:tabnew&lt;&#x2F;code&gt;) with &lt;code&gt;:vsplit&lt;&#x2F;code&gt; to display &lt;code&gt;file2&lt;&#x2F;code&gt; and &lt;code&gt;file3&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Save the session (&lt;code&gt;:mksession&lt;&#x2F;code&gt;) for future use.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cross-Window Collaboration&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;View different sections of the same buffer in multiple windows within a tab.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;faqs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#faqs&quot; aria-label=&quot;Anchor link for: faqs&quot;&gt;&lt;strong&gt;FAQs&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Q: Does closing a window delete its buffer?&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
A: No, unless the buffer is unused by other windows and &lt;code&gt;hidden&lt;&#x2F;code&gt; is disabled.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Q: How to auto-save sessions?&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
A: Use plugins like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tpope&#x2F;vim-obsession&quot;&gt;vim-obsession&lt;&#x2F;a&gt; or configure &lt;code&gt;autocmd&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Q: What&#x27;s the difference between tabs and windows?&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
A: Tabs organize window groups (workspaces), while windows display buffer content.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Master these concepts to supercharge your Vim workflow! 🚀&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>zld in Rust</title>
        <published>2025-02-14T00:00:00+00:00</published>
        <updated>2025-02-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/zld/"/>
        <id>https://xavier2code.site/posts/zld/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/zld/">&lt;p&gt;In the context of Rust development on macOS, &lt;code&gt;zld&lt;&#x2F;code&gt; refers to a faster alternative linker for Apple&#x27;s linker ld. It is designed to significantly speed up the linking phase of the build process, which can be a bottleneck in large projects.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;key-features-of-zld&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-features-of-zld&quot; aria-label=&quot;Anchor link for: key-features-of-zld&quot;&gt;Key Features of &lt;code&gt;zld&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Speed Optimization: &lt;code&gt;zld&lt;&#x2F;code&gt; uses optimized data structures like Swiss Tables and parallelizes multiple processing steps to speed up the linking process.&lt;&#x2F;li&gt;
&lt;li&gt;Compatibility: It works seamlessly with tools like Xcode, Bazel, and Rust.&lt;&#x2F;li&gt;
&lt;li&gt;Ease of Integration: &lt;code&gt;zld&lt;&#x2F;code&gt; can be easily integrated into existing projects without requiring changes to the project configuration.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;usage-in-rust-projects&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#usage-in-rust-projects&quot; aria-label=&quot;Anchor link for: usage-in-rust-projects&quot;&gt;Usage in Rust Projects&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To use &lt;code&gt;zld&lt;&#x2F;code&gt; in a Rust project on macOS, you can follow these steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;zld&lt;&#x2F;code&gt; using Homebrew:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;brew&lt;&#x2F;span&gt;&lt;span&gt; install michaeleisel&#x2F;zld&#x2F;zld
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Configure your Rust project to use &lt;code&gt;zld&lt;&#x2F;code&gt; by adding the following to your .cargo&#x2F;config.toml file:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;x86_64-apple-darwin&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rustflags &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;-C&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;link-arg=-fuse-ld=&#x2F;usr&#x2F;local&#x2F;bin&#x2F;zld&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;performance-benefits&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#performance-benefits&quot; aria-label=&quot;Anchor link for: performance-benefits&quot;&gt;Performance Benefits&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Using &lt;code&gt;zld&lt;&#x2F;code&gt; can lead to significant reductions in build times. For example, in some projects, it has been reported to reduce build times by 40% or more.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;note&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#note&quot; aria-label=&quot;Anchor link for: note&quot;&gt;Note&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;While &lt;code&gt;zld&lt;&#x2F;code&gt; is a powerful tool for speeding up the build process on macOS, it is worth noting that the Rust community is also exploring other linkers like lld for broader platform support and performance improvements.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>the ? operator and Ok(()) in Rust</title>
        <published>2025-02-13T00:00:00+00:00</published>
        <updated>2025-02-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/rust8/"/>
        <id>https://xavier2code.site/posts/rust8/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/rust8/">&lt;h2 id=&quot;the-operator&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-operator&quot; aria-label=&quot;Anchor link for: the-operator&quot;&gt;The &lt;code&gt;?&lt;&#x2F;code&gt; Operator&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;?&lt;&#x2F;code&gt; operator is used to propagate errors in functions that return a Result type. It is a shorthand for handling Result and Option types in a way that simplifies error handling and makes the code more readable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Usage of &lt;code&gt;?&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When you use the &lt;code&gt;?&lt;&#x2F;code&gt; operator on a &lt;code&gt;Result&lt;&#x2F;code&gt; or &lt;code&gt;Option&lt;&#x2F;code&gt; value, it does the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the value is &lt;code&gt;Ok(T)&lt;&#x2F;code&gt; or &lt;code&gt;Some(T)&lt;&#x2F;code&gt;, it unwraps the value and continues execution.&lt;&#x2F;li&gt;
&lt;li&gt;If the value is &lt;code&gt;Err(E)&lt;&#x2F;code&gt; or &lt;code&gt;None&lt;&#x2F;code&gt;, it returns early from the function with the error.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;process_file&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;open(path)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; contents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;read_to_string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; contents)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;File contents: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; contents)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;File::open(path)?&lt;&#x2F;code&gt; attempts to open the file. If it fails, it returns the error immediately.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;file.read_to_string(&amp;amp;mut contents)?&lt;&#x2F;code&gt; attempts to read the file contents. If it fails, it returns the error immediately.&lt;&#x2F;li&gt;
&lt;li&gt;If both operations succeed, it prints the contents and returns &lt;code&gt;Ok(())&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ok&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ok&quot; aria-label=&quot;Anchor link for: ok&quot;&gt;&lt;code&gt;Ok(())&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Ok(())&lt;&#x2F;code&gt; is a Result type where the success value is a unit type &lt;code&gt;()&lt;&#x2F;code&gt;. This is often used to indicate that a function has completed successfully without returning any specific value.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Meaning of &lt;code&gt;Ok(())&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ok&lt;&#x2F;code&gt;: Indicates that the operation was successful.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;()&lt;&#x2F;code&gt;: The unit type, which represents an empty tuple. It is used when there is no meaningful value to return.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the context of the process_file function above, &lt;code&gt;Ok(())&lt;&#x2F;code&gt; indicates that the function has completed successfully and there are no errors.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here is a complete example to illustrate the usage of &lt;code&gt;?&lt;&#x2F;code&gt; and &lt;code&gt;Ok(())&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Read}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;read_file_contents&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;open(path)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; contents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;read_to_string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; contents)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(contents)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;read_file_contents&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;example.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(contents) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;File contents: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; contents)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Failed to read file: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; e)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;File::open(path)?&lt;&#x2F;code&gt; and &lt;code&gt;file.read_to_string(&amp;amp;mut contents)?&lt;&#x2F;code&gt; use the &lt;code&gt;?&lt;&#x2F;code&gt; operator to propagate errors.&lt;&#x2F;li&gt;
&lt;li&gt;If both operations succeed, &lt;code&gt;Ok(contents)&lt;&#x2F;code&gt; is returned.&lt;&#x2F;li&gt;
&lt;li&gt;In the main function, the result is handled using a match statement.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;?&lt;&#x2F;code&gt; operator is used to propagate errors in functions that return a &lt;code&gt;Result&lt;&#x2F;code&gt; or &lt;code&gt;Option&lt;&#x2F;code&gt; type.
&lt;code&gt;Ok(())&lt;&#x2F;code&gt; is a Result type indicating successful completion without returning any specific value.
Using &lt;code&gt;?&lt;&#x2F;code&gt; and &lt;code&gt;Ok(())&lt;&#x2F;code&gt; helps make error handling in Rust more concise and readable.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>If let in Rust</title>
        <published>2025-02-11T00:00:00+00:00</published>
        <updated>2025-02-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/rust7/"/>
        <id>https://xavier2code.site/posts/rust7/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/rust7/">&lt;p&gt;In Rust, the &lt;code&gt;if let&lt;&#x2F;code&gt; construct is a syntactic sugar designed to simplify pattern matching for enums like Option and Result. It allows you to directly extract values from these enums without the need for a full match statement, making your code more concise and readable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basic-syntax&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#basic-syntax&quot; aria-label=&quot;Anchor link for: basic-syntax&quot;&gt;Basic Syntax&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The basic syntax for &lt;code&gt;if let&lt;&#x2F;code&gt; is as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; Pattern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Expression {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Code to execute if the pattern matches
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Optional else block to handle cases where the pattern does not match
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#use-cases&quot; aria-label=&quot;Anchor link for: use-cases&quot;&gt;Use Cases&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Handling &lt;code&gt;Option&lt;&#x2F;code&gt; Types&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The &lt;code&gt;Option&lt;&#x2F;code&gt; enum has two variants: &lt;code&gt;Some(T)&lt;&#x2F;code&gt; and &lt;code&gt;None&lt;&#x2F;code&gt;. The &lt;code&gt;if let&lt;&#x2F;code&gt; construct can be used to handle &lt;code&gt;Option&lt;&#x2F;code&gt; types and extract the value from &lt;code&gt;Some&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; option &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(value) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; option {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;The value is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; value)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;No value found&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, &lt;code&gt;if let Some(value) = option&lt;&#x2F;code&gt; attempts to match the &lt;code&gt;option&lt;&#x2F;code&gt; variable against the &lt;code&gt;Some&lt;&#x2F;code&gt; variant. If &lt;code&gt;option&lt;&#x2F;code&gt; is &lt;code&gt;Some(42)&lt;&#x2F;code&gt;, the value 42 is extracted into the variable value, and the &lt;code&gt;println!&lt;&#x2F;code&gt; statement is executed. If &lt;code&gt;option&lt;&#x2F;code&gt; is &lt;code&gt;None&lt;&#x2F;code&gt;, the else block is executed.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;Handling &lt;code&gt;Result&lt;&#x2F;code&gt; Types&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The Result &lt;code&gt;enum&lt;&#x2F;code&gt; has two variants: &lt;code&gt;Ok(T)&lt;&#x2F;code&gt; and &lt;code&gt;Err(E)&lt;&#x2F;code&gt;. Similar to &lt;code&gt;Option&lt;&#x2F;code&gt;, &lt;code&gt;if let&lt;&#x2F;code&gt; can be used to handle &lt;code&gt;Result&lt;&#x2F;code&gt; types and extract the value from &lt;code&gt;Ok&lt;&#x2F;code&gt; or &lt;code&gt;Err&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(value) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; result {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;The value is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; value)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;An error occurred&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, &lt;code&gt;if let Ok(value) = result&lt;&#x2F;code&gt; attempts to match the result variable against the &lt;code&gt;Ok&lt;&#x2F;code&gt; variant. If result is &lt;code&gt;Ok(42)``, the value 42 is extracted into the variable value, and the&lt;&#x2F;code&gt;println!``statement is executed. If result is&lt;code&gt;Err&lt;&#x2F;code&gt;, the else block is executed.&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;Handling Multiple Patterns&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;if let&lt;&#x2F;code&gt; can also be used to handle multiple patterns by using the &lt;code&gt;|&lt;&#x2F;code&gt; (or) operator.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;40 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;41 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; number {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;The number is close to 42&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;The number is not close to 42&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, &lt;code&gt;if let 40 | 41 | 42 = number&lt;&#x2F;code&gt; checks if the &lt;code&gt;number&lt;&#x2F;code&gt; variable matches any of the values 40, 41, or 42. If a match is found, the &lt;code&gt;println!&lt;&#x2F;code&gt; statement is executed; otherwise, the else block is executed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;advantages&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#advantages&quot; aria-label=&quot;Anchor link for: advantages&quot;&gt;Advantages&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Conciseness&lt;&#x2F;strong&gt;: &lt;code&gt;if let&lt;&#x2F;code&gt; makes your code more concise by eliminating the need for a lengthy &lt;code&gt;match&lt;&#x2F;code&gt; statement.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Readability&lt;&#x2F;strong&gt;: For simple pattern matching scenarios, &lt;code&gt;if let&lt;&#x2F;code&gt; enhances code readability and makes it easier to understand.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;considerations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#considerations&quot; aria-label=&quot;Anchor link for: considerations&quot;&gt;Considerations&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pattern Matching Completeness&lt;&#x2F;strong&gt;: &lt;code&gt;if let&lt;&#x2F;code&gt; is designed to handle a single pattern. For more complex pattern matching involving multiple cases, a match statement is more appropriate.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Optional &lt;code&gt;else&lt;&#x2F;code&gt; Block&lt;&#x2F;strong&gt;: The &lt;code&gt;else&lt;&#x2F;code&gt; block in &lt;code&gt;if let&lt;&#x2F;code&gt; is optional. If omitted, no code will be executed when the pattern does not match.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;if let&lt;&#x2F;code&gt; construct in Rust is a powerful tool for simplifying pattern matching, especially for enums like &lt;code&gt;Option&lt;&#x2F;code&gt; and &lt;code&gt;Result&lt;&#x2F;code&gt;. It allows you to write more concise and readable code, but it is important to be aware of its limitations and use it appropriately.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Helix and Neovim</title>
        <published>2025-02-10T00:00:00+00:00</published>
        <updated>2025-02-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/ide/"/>
        <id>https://xavier2code.site/posts/ide/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/ide/">&lt;p&gt;Helix and Neovim are both powerful terminal-based text editors, but they have distinct characteristics that make them suitable for different users. Here’s a detailed comparison based on various aspects:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;background-and-adoption&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#background-and-adoption&quot; aria-label=&quot;Anchor link for: background-and-adoption&quot;&gt;Background and Adoption&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Neovim&lt;&#x2F;strong&gt;: Neovim is a fork of Vim and has been a mainstay in the developer community for decades. It is highly regarded for its extensibility and powerful features.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Helix&lt;&#x2F;strong&gt;: Helix is a relatively new editor that has gained traction for its modern approach and ease of use. It is particularly appealing to those who want a minimalistic and intuitive editing experience.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;installation-and-setup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation-and-setup&quot; aria-label=&quot;Anchor link for: installation-and-setup&quot;&gt;Installation and Setup&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Neovim&lt;&#x2F;strong&gt;: Neovim can be easily installed via package managers. However, its extensive configuration options can be overwhelming for beginners.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Helix&lt;&#x2F;strong&gt;: Helix is not typically pre-installed but can be easily installed through package managers or compiled from source. Its configuration is minimalistic, requiring just a &lt;code&gt;TOML&lt;&#x2F;code&gt; file for customization.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;user-interface-and-experience&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#user-interface-and-experience&quot; aria-label=&quot;Anchor link for: user-interface-and-experience&quot;&gt;User Interface and Experience&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Neovim&lt;&#x2F;strong&gt;: Neovim distributions often come with heavy customizations and plugins like Telescope for enhanced navigation. The interface can be highly personalized.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Helix&lt;&#x2F;strong&gt;: Helix has a user-friendly interface with built-in features like a file picker and key sequence popups that display possible actions as you type. This makes it more intuitive for new users.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;intuitiveness-and-customization&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#intuitiveness-and-customization&quot; aria-label=&quot;Anchor link for: intuitiveness-and-customization&quot;&gt;Intuitiveness and Customization&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Neovim&lt;&#x2F;strong&gt;: Neovim uses a &lt;code&gt;verb&lt;&#x2F;code&gt;-&lt;code&gt;noun&lt;&#x2F;code&gt; keybinding approach (e.g., &lt;code&gt;dw&lt;&#x2F;code&gt; for delete word), which can be complex for beginners. It offers extensive customization through Lua scripts.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Helix&lt;&#x2F;strong&gt;: Helix follows a &lt;code&gt;noun&lt;&#x2F;code&gt;-&lt;code&gt;verb&lt;&#x2F;code&gt; pattern (e.g., &lt;code&gt;w&lt;&#x2F;code&gt; for word, then &lt;code&gt;d&lt;&#x2F;code&gt; to delete), which is more intuitive and user-friendly. Customization is limited but focuses on themes and behavioral tweaks.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;features-and-functionality&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#features-and-functionality&quot; aria-label=&quot;Anchor link for: features-and-functionality&quot;&gt;Features and Functionality&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Neovim&lt;&#x2F;strong&gt;: Neovim has a rich plugin ecosystem that extends its functionality significantly. It supports native code folding and has robust syntax highlighting through Tree-sitter.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Helix&lt;&#x2F;strong&gt;: Helix has built-in multi-cursor support and key sequence popups, which enhance productivity without needing plugins. It also uses Tree-sitter for syntax highlighting but lacks native code folding.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;performance-and-efficiency&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#performance-and-efficiency&quot; aria-label=&quot;Anchor link for: performance-and-efficiency&quot;&gt;Performance and Efficiency&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Neovim&lt;&#x2F;strong&gt;: Neovim is fast and efficient, especially with minimal plugin use. However, extensive plugin setups can introduce slight delays.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Helix&lt;&#x2F;strong&gt;: Helix is lightweight and fast, offering a seamless editing experience out-of-the-box. It maintains low resource consumption.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;learning-curve-and-community-support&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#learning-curve-and-community-support&quot; aria-label=&quot;Anchor link for: learning-curve-and-community-support&quot;&gt;Learning Curve and Community Support&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Neovim&lt;&#x2F;strong&gt;: Neovim has a steep learning curve due to its complex keybindings and extensive configuration options. However, it has a large and active community that provides ample resources and support.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Helix&lt;&#x2F;strong&gt;: Helix is easier to learn, thanks to its intuitive editing style and straightforward configuration. Its community is smaller but growing steadily.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pros-and-cons&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#pros-and-cons&quot; aria-label=&quot;Anchor link for: pros-and-cons&quot;&gt;Pros and Cons&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Helix Pros&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;Stability: Minimal configuration reduces potential issues.&lt;&#x2F;li&gt;
&lt;li&gt;Built-in Features: Multi-cursor support and intuitive keybindings enhance productivity.&lt;&#x2F;li&gt;
&lt;li&gt;Performance: Lightweight and fast.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Helix Cons&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;Limited Customization: Fewer customization options compared to Neovim.&lt;&#x2F;li&gt;
&lt;li&gt;No Plugin Support: Currently lacks a plugin ecosystem.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Neovim Pros&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;Extensive Plugin Ecosystem: Endless customization and functionality through plugins.&lt;&#x2F;li&gt;
&lt;li&gt;Large Community: Abundant resources and community support.&lt;&#x2F;li&gt;
&lt;li&gt;Proven Stability: Decades of development and use have made Vim a reliable tool.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Neovim Cons&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;Steep Learning Curve: Complex keybindings and configurations can be daunting for beginners.&lt;&#x2F;li&gt;
&lt;li&gt;Potential for Bloat: Extensive plugin use can lead to maintenance challenges and reduced performance.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;future-outlook-and-recommendations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#future-outlook-and-recommendations&quot; aria-label=&quot;Anchor link for: future-outlook-and-recommendations&quot;&gt;Future Outlook and Recommendations&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Helix: Helix is a compelling choice for those who value simplicity, stability, and out-of-the-box functionality. Its upcoming plugin support is an exciting prospect.&lt;&#x2F;li&gt;
&lt;li&gt;Neovim: Neovim remains a powerful choice for those who enjoy deep customization and a vast ecosystem of plugins.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Both Helix and Neovim are formidable text editors, and the choice depends on your priorities. If you prefer simplicity, stability, and a modern interface, Helix is a great option. If you need extensive customization and a rich plugin ecosystem, Neovim is the way to go.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Formatted Output in Rust</title>
        <published>2025-02-08T00:00:00+00:00</published>
        <updated>2025-02-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/rust4/"/>
        <id>https://xavier2code.site/posts/rust4/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/rust4/">&lt;p&gt;In Rust, &lt;code&gt;{}&lt;&#x2F;code&gt; and &lt;code&gt;{:?}&lt;&#x2F;code&gt; are used in the &lt;code&gt;format!&lt;&#x2F;code&gt; macro and other formatting contexts (like println!) to specify how values should be formatted. They are placeholders that get replaced by the actual values you provide. Here’s a detailed explanation of the differences between them:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;display-trait&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#display-trait&quot; aria-label=&quot;Anchor link for: display-trait&quot;&gt;&lt;code&gt;{}&lt;&#x2F;code&gt; (Display Trait)&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Purpose: The &lt;code&gt;{}&lt;&#x2F;code&gt; placeholder is used for types that implement the &lt;code&gt;std::fmt::Display&lt;&#x2F;code&gt; trait. This trait is intended for user-facing output and is designed to produce a human-readable representation of a value.&lt;&#x2F;li&gt;
&lt;li&gt;Usage: It is typically used for types where you want to provide a simple, readable string representation. Many primitive types (like &lt;code&gt;i32&lt;&#x2F;code&gt;, &lt;code&gt;f64&lt;&#x2F;code&gt;, &lt;code&gt;String&lt;&#x2F;code&gt;, etc.) implement &lt;code&gt;Display&lt;&#x2F;code&gt; by default.&lt;&#x2F;li&gt;
&lt;li&gt;Example:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Number: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, Text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; text)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;&#x2F;strong&gt;
&lt;code&gt;Number: 42, Text: Hello, world!&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debug-trait&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#debug-trait&quot; aria-label=&quot;Anchor link for: debug-trait&quot;&gt;&lt;code&gt;{:?}&lt;&#x2F;code&gt; (Debug Trait)&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Purpose: The &lt;code&gt;{:?}&lt;&#x2F;code&gt; placeholder is used for types that implement the &lt;code&gt;std::fmt::Debug&lt;&#x2F;code&gt; trait. This trait is intended for debugging purposes and is designed to produce a representation that is useful for developers. It often includes more detailed information about the structure of the value.&lt;&#x2F;li&gt;
&lt;li&gt;Usage: It is typically used for complex types (like structs, enums, vectors, etc.) where you want to inspect the internal state of the value. The output is often more verbose and includes information about the type and structure of the value.&lt;&#x2F;li&gt;
&lt;li&gt;Example:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; point &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Vector: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, Point: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; point)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;&#x2F;strong&gt;
&lt;code&gt;Vector: [1, 2, 3], Point: (10, 20)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-differences&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-differences&quot; aria-label=&quot;Anchor link for: key-differences&quot;&gt;Key Differences&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Trait Implementation:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{}&lt;&#x2F;code&gt; requires the &lt;code&gt;Display&lt;&#x2F;code&gt; trait.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:?}&lt;&#x2F;code&gt; requires the &lt;code&gt;Debug&lt;&#x2F;code&gt; trait.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Output Style:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{}&lt;&#x2F;code&gt; produces a human-readable, user-friendly string.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:?}&lt;&#x2F;code&gt; produces a more detailed, developer-friendly string.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Default Implementations:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Many primitive types implement &lt;code&gt;Display&lt;&#x2F;code&gt; by default.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;Debug&lt;&#x2F;code&gt; trait is automatically derived for structs and enums using &lt;code&gt;#[derive(Debug)]&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;example-with-structs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-with-structs&quot; aria-label=&quot;Anchor link for: example-with-structs&quot;&gt;Example with Structs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s an example with a custom struct to illustrate the difference:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Automatically derive Debug implementation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; String,
&lt;&#x2F;span&gt;&lt;span&gt;    age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Person &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Formatter) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Result {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span&gt;(f, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; (age: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;age)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Person {
&lt;&#x2F;span&gt;&lt;span&gt;        name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Alice&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Display: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; person)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Uses Display trait
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Debug: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; person)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Uses Debug trait
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Display:&lt;&#x2F;span&gt;&lt;span&gt; Alice (age: 30)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Debug:&lt;&#x2F;span&gt;&lt;span&gt; Person { name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Alice&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; age: 30 }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;In this example:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Display&lt;&#x2F;code&gt; implementation provides a concise, user-friendly string.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;Debug&lt;&#x2F;code&gt; implementation, derived automatically, provides a detailed, developer-friendly string.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;{}&lt;&#x2F;code&gt; when you want a simple, human-readable representation.&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;{:?}&lt;&#x2F;code&gt; when you need a detailed, developer-friendly representation for debugging purposes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Role of derive in Rust</title>
        <published>2025-02-08T00:00:00+00:00</published>
        <updated>2025-02-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/rust5/"/>
        <id>https://xavier2code.site/posts/rust5/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/rust5/">&lt;p&gt;In Rust, the &lt;code&gt;derive&lt;&#x2F;code&gt; attribute is a powerful tool that allows the compiler to automatically generate implementations for certain traits. This feature significantly reduces the amount of boilerplate code developers need to write, making the development process more efficient and less error-prone.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;purpose-of-derive&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#purpose-of-derive&quot; aria-label=&quot;Anchor link for: purpose-of-derive&quot;&gt;Purpose of derive&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The primary purpose of the &lt;code&gt;derive&lt;&#x2F;code&gt; attribute is to automate the implementation of common traits for custom data types. This is particularly useful for traits that have straightforward, default implementations. By using &lt;code&gt;derive&lt;&#x2F;code&gt;, developers can focus on writing the core logic of their programs without getting bogged down in repetitive code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;commonly-derivable-traits&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#commonly-derivable-traits&quot; aria-label=&quot;Anchor link for: commonly-derivable-traits&quot;&gt;Commonly Derivable Traits&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The following traits can be derived using the &lt;code&gt;#[derive]&lt;&#x2F;code&gt; attribute:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Comparison Traits: &lt;code&gt;Eq&lt;&#x2F;code&gt;, &lt;code&gt;PartialEq&lt;&#x2F;code&gt;, &lt;code&gt;Ord&lt;&#x2F;code&gt;, &lt;code&gt;PartialOrd&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Cloning and Copying: &lt;code&gt;Clone&lt;&#x2F;code&gt;, &lt;code&gt;Copy&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Hashing: &lt;code&gt;Hash&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Default Values: &lt;code&gt;Default&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Debugging: &lt;code&gt;Debug&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;concrete-examples&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#concrete-examples&quot; aria-label=&quot;Anchor link for: concrete-examples&quot;&gt;Concrete Examples&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Deriving &lt;code&gt;Debug&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Debug&lt;&#x2F;code&gt; trait is often used for debugging purposes. It allows you to print the internal state of a struct or enum using the {:?} formatter.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; point &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Point { x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;20 &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; point)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Output: Point { x: 10, y: 20 }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, the &lt;code&gt;#[derive(Debug)]&lt;&#x2F;code&gt; attribute automatically implements the Debug trait for the Point struct, allowing us to print its internal state.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Deriving &lt;code&gt;Clone&lt;&#x2F;code&gt; and &lt;code&gt;Copy&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The Clone trait is used to create a deep copy of a value, while the Copy trait provides a shallow copy. These traits are particularly useful for types that need to be duplicated.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Copy)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; point1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Point { x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;20 &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; point2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; point1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Copy trait allows this
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; point3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; point1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Clone trait allows this
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; point2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Output: Point { x: 10, y: 20 }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; point3)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Output: Point { x: 10, y: 20 }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, the &lt;code&gt;#[derive(Debug, Clone, Copy)]&lt;&#x2F;code&gt; attribute implements both Debug, Clone, and Copy traits for the Point struct.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Deriving &lt;code&gt;PartialEq&lt;&#x2F;code&gt; and &lt;code&gt;Eq&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;PartialEq&lt;&#x2F;code&gt; trait is used to compare two values for equality, while &lt;code&gt;Eq&lt;&#x2F;code&gt; is a marker trait that indicates that the comparison is reflexive, symmetric, and transitive.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(PartialEq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Eq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Point { x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Point { x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; p2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; This works because of PartialEq
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, the &lt;code&gt;#[derive(PartialEq, Eq)]&lt;&#x2F;code&gt; attribute implements both &lt;code&gt;PartialEq&lt;&#x2F;code&gt; and &lt;code&gt;Eq&lt;&#x2F;code&gt; traits for the &lt;code&gt;Point&lt;&#x2F;code&gt; struct.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;differences-from-other-languages&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#differences-from-other-languages&quot; aria-label=&quot;Anchor link for: differences-from-other-languages&quot;&gt;Differences from Other Languages&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automatic Implementation&lt;&#x2F;strong&gt;: Unlike some other languages where you might need to manually implement methods for traits like equality or cloning, Rust&#x27;s &lt;code&gt;derive&lt;&#x2F;code&gt; attribute automates this process.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Type Safety&lt;&#x2F;strong&gt;: Rust&#x27;s type system ensures that only types that can logically support a trait are derived. For example, you can&#x27;t derive &lt;code&gt;Copy&lt;&#x2F;code&gt; for a type that contains non-&lt;code&gt;Copy&lt;&#x2F;code&gt; fields.&lt;&#x2F;li&gt;
&lt;li&gt;Extensibility: While &lt;code&gt;derive&lt;&#x2F;code&gt; provides default implementations, you can still manually implement traits if you need more complex behavior.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;derive&lt;&#x2F;code&gt; attribute in Rust is a powerful tool that simplifies the implementation of common traits, reducing boilerplate code and improving developer productivity. By leveraging &lt;code&gt;derive&lt;&#x2F;code&gt;, you can quickly add functionality to your custom data types while maintaining the flexibility to implement more complex behavior when needed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding proc_macro_attribute in Rust</title>
        <published>2025-02-08T00:00:00+00:00</published>
        <updated>2025-02-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/rust6/"/>
        <id>https://xavier2code.site/posts/rust6/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/rust6/">&lt;p&gt;&lt;code&gt;proc_macro_attribute&lt;&#x2F;code&gt; is a type of procedural macro in Rust that allows you to define custom attributes. These attributes can be attached to items like functions, structs, enums, and more. The macro can then manipulate or generate code based on the item it is attached to.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-concepts&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-concepts&quot; aria-label=&quot;Anchor link for: key-concepts&quot;&gt;Key Concepts&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Procedural Macros:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Procedural macros are unhygienic, meaning they behave as if the output token stream was written inline to the code it’s next to.&lt;&#x2F;li&gt;
&lt;li&gt;They can be function-like, derive, or attribute macros.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Attribute Macros:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Attribute macros define new outer attributes that can be attached to items.&lt;&#x2F;li&gt;
&lt;li&gt;They are defined by a public function with the &lt;code&gt;proc_macro_attribute&lt;&#x2F;code&gt; attribute and a signature of ``(TokenStream, TokenStream) -&amp;gt; TokenStream`.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;example-of-proc-macro-attribute&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-of-proc-macro-attribute&quot; aria-label=&quot;Anchor link for: example-of-proc-macro-attribute&quot;&gt;Example of &lt;code&gt;proc_macro_attribute&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s create a custom attribute macro that logs the input and output token streams.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new procedural macro crate:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; new my_macro&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt; --lib
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; my_macro
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Modify &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;lib&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;proc-macro &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;proc-macro2 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;quote &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;syn &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Implement the attribute macro in &lt;code&gt;src&#x2F;lib.rs&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; proc_macro&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;proc_macro&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;TokenStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;syn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;{parse_macro_input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; ItemFn}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span&gt;[proc_macro_attribute]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;log_streams&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; TokenStream, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; TokenStream) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Parse the input token stream as a function item
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; input_fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;parse_macro_input!&lt;&#x2F;span&gt;&lt;span&gt;(item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span&gt; ItemFn)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Convert the function item back to a token stream for logging
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; attr_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; attr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Log the input streams
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Attribute: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; attr_str)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Item: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; item_str)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Generate the output token stream
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expanded &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;quote! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;input_fn
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Return the generated token stream
&lt;&#x2F;span&gt;&lt;span&gt;    TokenStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(expanded)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Use the attribute macro in another crate:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; new my_project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; my_project
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Modify &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; to include the macro crate as a dependency:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;my_macro &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;..&#x2F;my_macro&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Use the attribute macro in &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; my_macro&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;my_macro&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;log_streams&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span&gt;[log_streams]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;my_function&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;my_function&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When you run this code, the &lt;code&gt;log_streams&lt;&#x2F;code&gt; macro will log the input attribute and item token streams to the console.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;explanation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#explanation&quot; aria-label=&quot;Anchor link for: explanation&quot;&gt;Explanation&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Input Token Streams:
&lt;ul&gt;
&lt;li&gt;The first &lt;code&gt;TokenStream&lt;&#x2F;code&gt; (&lt;code&gt;attr&lt;&#x2F;code&gt;) contains the tokens following the attribute name.&lt;&#x2F;li&gt;
&lt;li&gt;The second &lt;code&gt;TokenStream&lt;&#x2F;code&gt; (&lt;code&gt;item&lt;&#x2F;code&gt;) contains the tokens of the item the attribute is attached to.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Output Token Stream:
&lt;ul&gt;
&lt;li&gt;The macro generates a new &lt;code&gt;TokenStream&lt;&#x2F;code&gt; that replaces the original item. In this example, it simply returns the original item unchanged.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Use Case:
&lt;ul&gt;
&lt;li&gt;This example logs the token streams for debugging purposes. In a real-world scenario, you might generate additional code or modify the item based on the attribute.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;proc_macro_attribute&lt;&#x2F;code&gt; allows you to define custom attributes that can manipulate or generate code based on the items they are attached to. By using procedural macros, you can create powerful tools for code generation and manipulation at compile time.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Weekly #5</title>
        <published>2025-02-08T00:00:00+00:00</published>
        <updated>2025-02-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/weekly5/"/>
        <id>https://xavier2code.site/posts/weekly5/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/weekly5/">&lt;p&gt;🍇&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Box in Rust</title>
        <published>2025-02-07T00:00:00+00:00</published>
        <updated>2025-02-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/rust3/"/>
        <id>https://xavier2code.site/posts/rust3/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/rust3/">&lt;h2 id=&quot;what-is-box-t&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-box-t&quot; aria-label=&quot;Anchor link for: what-is-box-t&quot;&gt;What is &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In Rust, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is a smart pointer used for heap allocation. It allows you to store data on the heap rather than the stack, providing greater flexibility and dynamic memory management. &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is a simple smart pointer provided by the Rust standard library that adheres to Rust&#x27;s ownership and borrowing rules, ensuring memory safety.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;main-uses&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#main-uses&quot; aria-label=&quot;Anchor link for: main-uses&quot;&gt;Main Uses&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Heap Allocation:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; when you need to allocate memory on the heap. This is useful for handling large data structures or dynamic data that don&#x27;t fit well on the stack.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Recursive Data Structures:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is particularly useful for defining recursive data structures, such as linked lists or trees, as it allows you to avoid infinite recursion with stack allocation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Ownership Transfer:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; can be used to transfer ownership of data between functions without copying the data, which is efficient and avoids unnecessary overhead.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;basic-usage&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#basic-usage&quot; aria-label=&quot;Anchor link for: basic-usage&quot;&gt;Basic Usage&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Creating a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Create a Box to store an i32 value on the heap
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; x)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; for Complex Data Structures&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Node&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Create a linked list
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; node3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(Node { value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; node2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(Node { value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(node3) })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; node1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(Node { value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(node2) })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; node1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;recursive-data-structures&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#recursive-data-structures&quot; aria-label=&quot;Anchor link for: recursive-data-structures&quot;&gt;Recursive Data Structures&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Box&lt;T&gt; is very useful for defining recursive data structures because it allows you to allocate memory on the heap, avoiding infinite recursion with stack allocation.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Cons(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;List&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    Nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Cons(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Cons(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Cons(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Nil))))))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; list)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;memory-management&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#memory-management&quot; aria-label=&quot;Anchor link for: memory-management&quot;&gt;Memory Management&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Box&lt;T&gt; plays a crucial role in Rust&#x27;s ownership system. When a Box&lt;T&gt; is dropped, it automatically deallocates the heap memory it manages. This ensures memory safety and prevents memory leaks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#performance&quot; aria-label=&quot;Anchor link for: performance&quot;&gt;Performance&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Using Box&lt;T&gt; introduces some overhead because data is stored on the heap, and accessing heap memory is generally slower than accessing stack memory. However, this overhead is often acceptable, especially when dealing with large data structures or dynamic data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Purpose: &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is used for heap allocation, making it suitable for large data structures and recursive data structures.
Ownership: &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; follows Rust&#x27;s ownership rules, ensuring memory safety.
Performance: While using &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; introduces some overhead, it is often necessary and acceptable for certain use cases.
I hope this explanation helps you understand and use &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; effectively!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Open Deep Research</title>
        <published>2025-02-06T00:00:00+00:00</published>
        <updated>2025-02-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/deepsearch/"/>
        <id>https://xavier2code.site/posts/deepsearch/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/deepsearch/">&lt;p&gt;&quot;Open Deep Research&quot; is an open-source alternative to OpenAI&#x27;s Deep Research tool. It aims to generate AI-powered reports from web search results with precision and efficiency. Here are some key points about Open Deep Research:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-open-deep-research&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-open-deep-research&quot; aria-label=&quot;Anchor link for: what-is-open-deep-research&quot;&gt;What is Open Deep Research?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Definition&lt;&#x2F;strong&gt;: Open Deep Research is an open-source tool designed to automate the process of generating detailed reports based on web search results. It leverages AI to analyze and synthesize information from multiple sources.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Functionality&lt;&#x2F;strong&gt;: It can autonomously search the web, scroll through pages, manipulate files, and even perform calculations with data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-does-it-work&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-does-it-work&quot; aria-label=&quot;Anchor link for: how-does-it-work&quot;&gt;How Does It Work?&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Search Results Retrieval&lt;&#x2F;strong&gt;: The tool uses the Bing Search API to fetch comprehensive search results for a given query.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Content Extraction&lt;&#x2F;strong&gt;: It processes the contents of selected search results using JinaAI to ensure accurate and relevant information.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Report Generation&lt;&#x2F;strong&gt;: The extracted information is then used to generate a detailed report using an AI model of your choice (e.g., OpenAI&#x27;s GPT, Google Gemini, etc.).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;features&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#features&quot; aria-label=&quot;Anchor link for: features&quot;&gt;Features&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multi-Platform AI Support&lt;&#x2F;strong&gt;: Supports multiple AI platforms and models, offering flexibility in choosing the right AI model for specific research needs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Customization&lt;&#x2F;strong&gt;: Users can customize the tool by selecting their preferred AI model, customizing prompts, updating rate limits, and configuring the number of results fetched and selected.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Export Options&lt;&#x2F;strong&gt;: Reports can be exported in multiple formats, including PDF, Word, and plain text.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Knowledge Base&lt;&#x2F;strong&gt;: Users can save and access their generated reports in a personal knowledge base for future reference.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;comparison-with-openai-s-deep-research&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#comparison-with-openai-s-deep-research&quot; aria-label=&quot;Anchor link for: comparison-with-openai-s-deep-research&quot;&gt;Comparison with OpenAI&#x27;s Deep Research&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;&#x2F;strong&gt;: Open Deep Research achieves a score of 54% on the GAIA benchmark, compared to OpenAI&#x27;s Deep Research, which scores 67.36%.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Accessibility&lt;&#x2F;strong&gt;: While OpenAI&#x27;s Deep Research is currently available only to ChatGPT Pro users, Open Deep Research is open-source and accessible to anyone.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;current-limitations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#current-limitations&quot; aria-label=&quot;Anchor link for: current-limitations&quot;&gt;Current Limitations&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model Dependency&lt;&#x2F;strong&gt;: Open Deep Research lacks access to OpenAI&#x27;s proprietary o3 model, which is a key component of OpenAI&#x27;s Deep Research. This limits its performance in certain complex tasks.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Usability Issues&lt;&#x2F;strong&gt;: During initial public demos, Open Deep Research faced issues with heavy load and reliability.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;future-development&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#future-development&quot; aria-label=&quot;Anchor link for: future-development&quot;&gt;Future Development&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Improvement Commitment&lt;&#x2F;strong&gt;: The development team is committed to improving the tool and has made the source code available on GitHub for community feedback and contributions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Open Deep Research represents an effort to democratize access to advanced research tools by providing an open-source alternative to proprietary solutions.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ownership in Rust</title>
        <published>2025-02-05T00:00:00+00:00</published>
        <updated>2025-02-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/rust1/"/>
        <id>https://xavier2code.site/posts/rust1/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/rust1/">&lt;h2 id=&quot;the-concept-of-ownership&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-concept-of-ownership&quot; aria-label=&quot;Anchor link for: the-concept-of-ownership&quot;&gt;The Concept of Ownership&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In Rust, ownership is a set of rules that govern how memory is managed in a program.
Unlike languages that use garbage collection (e.g., Java or Python), Rust manages
memory through a system of ownership with a set of rules that the compiler checks
at compile time. These rules ensure that memory is always valid and that there are
no data races or undefined behavior.
The ownership system in Rust is based on three core rules:
Each value in Rust has a single owner. At any given time, only one variable can own
a value. When the owner goes out of scope, the value is dropped. When the owner variable
goes out of scope, the value is automatically deallocated.
Ownership can be transferred between variables. Ownership can be moved from one variable
to another, but only one variable can own the value at a time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-importance-of-ownership&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-importance-of-ownership&quot; aria-label=&quot;Anchor link for: the-importance-of-ownership&quot;&gt;The Importance of Ownership&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Ownership is a fundamental concept in Rust that ensures memory safety without the
need for a garbage collector. It helps prevent common bugs such as null pointer
dereferencing, data races, and memory leaks. By enforcing these rules at compile
time, Rust provides strong guarantees about the safety and correctness of code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;applications-of-ownership&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#applications-of-ownership&quot; aria-label=&quot;Anchor link for: applications-of-ownership&quot;&gt;Applications of Ownership&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ownership-and-variables&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ownership-and-variables&quot; aria-label=&quot;Anchor link for: ownership-and-variables&quot;&gt;Ownership and Variables&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;When a variable is assigned a value, it becomes the owner of that value. When
the variable goes out of scope, the value is dropped.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; s1 owns the String value
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; s2 now owns the String value, s1 is no longer valid
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; s2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; s2 goes out of scope, the String value is dropped
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;{}&amp;quot;, s1); &#x2F;&#x2F; This would cause a compile-time error because s1 no longer owns the value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, s1 initially owns the String value. When s2 is assigned the value of s1, ownership is transferred to s2, and s1 is no longer valid. When s2 goes out of scope, the String value is dropped.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ownership-and-functions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ownership-and-functions&quot; aria-label=&quot;Anchor link for: ownership-and-functions&quot;&gt;Ownership and Functions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;When a value is passed to a function, ownership is transferred to the function parameter. When the function returns, ownership is transferred back to the caller.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;take_ownership&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; String) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; s is dropped here
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;take_ownership&lt;&#x2F;span&gt;&lt;span&gt;(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Ownership of s is transferred to the function
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;{}&amp;quot;, s); &#x2F;&#x2F; This would cause a compile-time error because s no longer owns the value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, when s is passed to take_ownership, ownership is transferred to the function parameter s. When the function ends, s is dropped, and the original variable s in main is no longer valid.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;borrowing-and-references&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#borrowing-and-references&quot; aria-label=&quot;Anchor link for: borrowing-and-references&quot;&gt;Borrowing and References&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Rust also allows borrowing values through references, which do not take ownership. References can be either mutable or immutable.
Immutable references (&amp;amp;T) allow multiple references to the same data, but the data cannot be modified.
Mutable references (&amp;amp;mut T) allow a single reference to modify the data, but no other references can exist at the same time.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;calculate_length&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;s1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Immutable borrow
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;The length of &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; s1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; len)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; s2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;change&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; s2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Mutable borrow
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; s2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;calculate_length&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; s is an immutable reference
&lt;&#x2F;span&gt;&lt;span&gt;    s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; s goes out of scope here, but it doesn&amp;#39;t drop the String value
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;change&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; String) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; s is a mutable reference
&lt;&#x2F;span&gt;&lt;span&gt;    s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;, world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; s goes out of scope here, but it doesn&amp;#39;t drop the String value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, calculate_length takes an immutable reference to s1, allowing it to read the length without taking ownership. change takes a mutable reference to s2, allowing it to modify the String value without taking ownership.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ownership-and-structs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ownership-and-structs&quot; aria-label=&quot;Anchor link for: ownership-and-structs&quot;&gt;Ownership and Structs&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Structs can own data, and when a struct is dropped, all of its owned data is also dropped.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; String,
&lt;&#x2F;span&gt;&lt;span&gt;    email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; String,
&lt;&#x2F;span&gt;&lt;span&gt;    sign_in_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; User {
&lt;&#x2F;span&gt;&lt;span&gt;        email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;someone@example.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;someusername123&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        sign_in_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; user1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Ownership of user1&amp;#39;s fields is transferred to user2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;{}&amp;quot;, user1.email); &#x2F;&#x2F; This would cause a compile-time error because user1 no longer owns its fields
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, user1 owns the String values for email and username. When user2 is assigned the value of user1, ownership of these fields is transferred to user2, and user1 is no longer valid.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ownership-and-enums&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ownership-and-enums&quot; aria-label=&quot;Anchor link for: ownership-and-enums&quot;&gt;Ownership and Enums&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Enums can also own data, and when an enum is dropped, all of its owned data is also dropped.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;IpAddr &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;V4&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;V6&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; home &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;IpAddr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;V4&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; loopback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Ownership of home&amp;#39;s data is transferred to loopback
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;{:?}&amp;quot;, home); &#x2F;&#x2F; This would cause a compile-time error because home no longer owns its data
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, home owns the String value for the V4 variant. When loopback is assigned the value of home, ownership of the String value is transferred to loopback, and home is no longer valid.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Ownership is a fundamental concept in Rust that ensures memory safety and prevents common bugs such as null pointer dereferencing and data races. By managing memory through a set of ownership rules, Rust provides strong guarantees about the safety and correctness of code. Understanding ownership is crucial for writing idiomatic and safe Rust programs.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Lifetimes in Rust</title>
        <published>2025-02-05T00:00:00+00:00</published>
        <updated>2025-02-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/rust2/"/>
        <id>https://xavier2code.site/posts/rust2/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/rust2/">&lt;h2 id=&quot;the-concept-of-lifetimes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-concept-of-lifetimes&quot; aria-label=&quot;Anchor link for: the-concept-of-lifetimes&quot;&gt;The Concept of Lifetimes&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In Rust, lifetimes are a mechanism used by the compiler to ensure that all references are valid while they are in use. Lifetimes help prevent dangling references and data races. Lifetime annotations are used to explicitly inform the compiler about the lifetimes of references so that it can perform checks at compile time.
Lifetimes are typically denoted by symbols such as &#x27;a, &#x27;b, etc. These symbols are generic lifetime parameters that describe the relationships between the lifetimes of references.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-difference-between-lifetimes-and-scopes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-difference-between-lifetimes-and-scopes&quot; aria-label=&quot;Anchor link for: the-difference-between-lifetimes-and-scopes&quot;&gt;The Difference Between Lifetimes and Scopes&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Scope: The range in the code where a variable or reference is valid.&lt;&#x2F;li&gt;
&lt;li&gt;Lifetime: The duration for which a reference is valid relative to the data it borrows.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;s1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; The lifetime of `r` begins
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; r)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; The lifetime of `r` ends, and the scope of `s1` ends
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, the scope of s1 is the entire main function, while the lifetime of r is a subset of s1&#x27;s scope.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;applications-of-lifetimes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#applications-of-lifetimes&quot; aria-label=&quot;Anchor link for: applications-of-lifetimes&quot;&gt;Applications of Lifetimes&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;lifetimes-in-functions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lifetimes-in-functions&quot; aria-label=&quot;Anchor link for: lifetimes-in-functions&quot;&gt;Lifetimes in Functions&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;When a function returns a reference, it is necessary to explicitly annotate the lifetime to ensure that the returned reference is valid within the caller&#x27;s scope.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;longest&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    x
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    y
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;long string is long&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;xyz&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;longest&lt;&#x2F;span&gt;&lt;span&gt;(string1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; string2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;The longest string is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; result)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, the longest function&#x27;s return value&#x27;s lifetime is associated with the lifetimes of the input parameters x and y. The compiler ensures that the returned reference is valid within the caller&#x27;s scope.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lifetimes-in-structs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lifetimes-in-structs&quot; aria-label=&quot;Anchor link for: lifetimes-in-structs&quot;&gt;Lifetimes in Structs&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;When a struct contains references, it is necessary to explicitly annotate the lifetime to ensure the validity of the struct instance.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Book { title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; author }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_title&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;title
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;The Rust Programming Language&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Steve Klabnik and Carol Nichols&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; book &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;author)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Book title: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_title&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, the Book struct contains two string slice references. The lifetime &#x27;a ensures that the Book instance exists within the validity period of the references.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lifetime-elision-rules&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lifetime-elision-rules&quot; aria-label=&quot;Anchor link for: lifetime-elision-rules&quot;&gt;Lifetime Elision Rules&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In some cases, the Rust compiler can automatically infer lifetimes, thus omitting explicit annotations.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;first_word&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Implementation
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, although lifetimes are not explicitly annotated, the compiler infers that the input and output references have the same lifetime based on the elision rules.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;Summary&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Lifetimes are an important concept in Rust, used to ensure that references are always valid while in use. By explicitly annotating lifetimes, the validity period of references can be clearly defined, preventing dangling references and data races. Explicit lifetime annotations are key to ensuring the safety of code in functions and structs.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Weekly #4</title>
        <published>2025-01-26T00:00:00+00:00</published>
        <updated>2025-01-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/weekly4/"/>
        <id>https://xavier2code.site/posts/weekly4/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/weekly4/">&lt;p&gt;🍇&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Staticman</title>
        <published>2025-01-23T00:00:00+00:00</published>
        <updated>2025-01-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/staticman/"/>
        <id>https://xavier2code.site/posts/staticman/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/staticman/">&lt;h2 id=&quot;what-is-staticman&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-staticman&quot; aria-label=&quot;Anchor link for: what-is-staticman&quot;&gt;What is Staticman&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Staticman is an Open Source application which enables static websites to accept dynamic content submissions, including things like comments. A simple REST API is exposed which accepts content and publishes it to the site. While many comment solutions for static websites require embedding arbitrary JavaScript (and often privacy invading trackers), Staticman works with a simple REST form submission. This means it can even work with bare HTML pages!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to Build a Static Site Generator in Rust</title>
        <published>2025-01-20T00:00:00+00:00</published>
        <updated>2025-01-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/ssg/"/>
        <id>https://xavier2code.site/posts/ssg/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/ssg/"></content>
        
    </entry>
    <entry xml:lang="en">
        <title>Weekly #3</title>
        <published>2025-01-19T00:00:00+00:00</published>
        <updated>2025-01-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/weekly3/"/>
        <id>https://xavier2code.site/posts/weekly3/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/weekly3/">&lt;p&gt;🍇&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tera</title>
        <published>2025-01-17T00:00:00+00:00</published>
        <updated>2025-01-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/tera/"/>
        <id>https://xavier2code.site/posts/tera/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/tera/">&lt;h2 id=&quot;tera&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tera&quot; aria-label=&quot;Anchor link for: tera&quot;&gt;Tera&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;🍇 Slow and steady wins the race.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;usage&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#usage&quot; aria-label=&quot;Anchor link for: usage&quot;&gt;Usage&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The primary method of using Tera is to load and parse all the templates in a given glob.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;templates&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  hello.html
&lt;&#x2F;span&gt;&lt;span&gt;  index.html
&lt;&#x2F;span&gt;&lt;span&gt;  products&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    product.html
&lt;&#x2F;span&gt;&lt;span&gt;    price.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Assuming the Rust file is at the same level as the &lt;code&gt;templates&lt;&#x2F;code&gt; folder, we can get a Tera instance that way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Tera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; use globbing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tera &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;Tera&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;templates&#x2F;**&#x2F;*.html&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(t) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Parsing error(s): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; e)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;exit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>2024 in Review</title>
        <published>2024-12-31T00:00:00+00:00</published>
        <updated>2024-12-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              xavier
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://xavier2code.site/posts/review/"/>
        <id>https://xavier2code.site/posts/review/</id>
        
        <content type="html" xml:base="https://xavier2code.site/posts/review/">&lt;h2 id=&quot;the-long-dark-night&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-long-dark-night&quot; aria-label=&quot;Anchor link for: the-long-dark-night&quot;&gt;The Long, Dark Night&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;2024 has been the darkest year of my life. The layoff at the beginning of the year and the subsequent labor arbitration left me in a state of deep anxiety. From March to June, I spent three long months scrambling to find a new job. What worried me the most was my father, who hasn’t worked in 20 years. In his mind, having a stable job is essential to living a proper life—anything less is irresponsible. I didn’t want to argue whether his perspective was right or wrong, but during those months of unemployment, his pressure weighed heavily on me.&lt;&#x2F;p&gt;
&lt;p&gt;I spammed my resume across various job platforms, sending out dozens of applications every day, but hardly received any responses from HR. At first, I was confident in my years of experience as a software developer and aimed for an architect position. However, as time dragged on, I began to doubt my abilities and gradually lowered my expectations.&lt;&#x2F;p&gt;
&lt;p&gt;Jobs that offered good pay, light workloads, and were close to home seemed out of reach. Fortunately, in June, I landed a backend development position at a medical equipment company. The software team I joined developed supporting software for hospital devices. Although the salary was only half of what I used to earn, the work was straightforward, and the company rarely required overtime. Just like that, I settled into a nine-to-five routine.&lt;&#x2F;p&gt;
&lt;p&gt;My family was happy for me, but deep down, I knew this wasn’t what I truly wanted. I yearned for freedom and still had ambitions. I believed I was still young and should be doing something more meaningful, something cooler.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-new-beginning&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-new-beginning&quot; aria-label=&quot;Anchor link for: a-new-beginning&quot;&gt;A New Beginning&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;With over six years of experience in backend development and system architecture, I started to explore new fields. My first interest was artificial intelligence. I began searching for job openings in this area and quickly realized that to dive deep into AI development, a master’s degree in a related field was often required.&lt;&#x2F;p&gt;
&lt;p&gt;My first thought was to pursue a master’s degree in computer science. In fact, I had already started preparing for the entrance exams earlier this year, but it wasn’t until I secured this job that I could truly focus on studying.&lt;&#x2F;p&gt;
&lt;p&gt;So, during my free time after work, I began reviewing materials for the exams—calculus, linear algebra, algorithms, and data structures. However, it didn’t take long for my department manager to put a stop to it. He warned me not to spend time on these studies, claiming they were unrelated to my work.&lt;&#x2F;p&gt;
&lt;p&gt;At first, I felt disheartened, but I didn’t give up. I knew that the path to pursuing my dreams would never be smooth. Even though my current reality felt restrictive, I still believed that the future held endless possibilities. I would continue to seek opportunities and strive toward my goals.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lights-out&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lights-out&quot; aria-label=&quot;Anchor link for: lights-out&quot;&gt;Lights Out&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
</content>
        
    </entry>
</feed>
